/*
*	New C++ File starts here.
*	This file should be named skel.cc
*	Automatically generated by NML CodeGen Java Applet.
*	with command line arguments :  script=temp.gen
*	on 9/2/08 3:45 PM
*	RCS_VERSION=@(#) RCS_LIBRARY_VERSION: 2007.March_960M Compiled on Fri Mar 23 11:06:17 EDT 2007 for the java platform.
*	$Id: CodeGenCommon.java 1233 2008-07-21 20:19:54Z shackle $
*
*	.gen script :
*		0:load skel.hh
*		1:load skelIntf.hh
*		2:clear
*		3:select_from_file skelIntf.hh
*		4:set_format_function skelIntf_format
*		5:generate_symbol_lookups=true
*		6:generate C++ constructor >skelIntf.cc
*		7:generate C++ format >skelIntf.cc
*
*/

// Include all NML, CMS, and RCS classes and functions
#include "rcs.hh"

// Include command and status message definitions
#include "skel.hh"
#include "skelIntf.hh"

// Forward Function Prototypes


#ifndef MAX_SKELINTF_NAME_LENGTH
#define MAX_SKELINTF_NAME_LENGTH 8
#endif
#ifndef SKELINTF_NAME_LIST_LENGTH
#define SKELINTF_NAME_LIST_LENGTH 3
#endif


/* This list must be in alphabetical order and the three lists must correspond. */
const char skelIntf_name_list[SKELINTF_NAME_LIST_LENGTH][MAX_SKELINTF_NAME_LENGTH]= {
	"SkelErr", /* 0,1002 */
	"SkelMsg", /* 1,1003 */
	""};
const NMLTYPE skelIntf_id_list[SKELINTF_NAME_LIST_LENGTH]= {
	SKEL_ERR_TYPE, /* 0,1002 */
	SKEL_MSG_TYPE, /* 1,1003 */
	-1};
const size_t skelIntf_size_list[SKELINTF_NAME_LIST_LENGTH]= {
	sizeof(SkelErr),
	sizeof(SkelMsg),
	0};
const char *skelIntf_symbol_lookup(long type);


// Enumerated Type Constants

/*
Estimated_size	SkelErr	296
Estimated_size	SkelMsg	296
Estimated_size	MAXIMUM	296
*/
/*
*	NML/CMS Format function : skelIntf_format
*/
int skelIntf_format(NMLTYPE type, void *buffer, CMS *cms)
{

	type = cms->check_type_info(type,buffer,"skelIntf",
		(cms_symbol_lookup_function_t) skelIntf_symbol_lookup,
		(const char **)skelIntf_name_list,
		skelIntf_id_list,skelIntf_size_list,
		SKELINTF_NAME_LIST_LENGTH,
		MAX_SKELINTF_NAME_LENGTH);

	switch(type)
	{
	case SKEL_ERR_TYPE:
		((SkelErr *) buffer)->update(cms);
		break;
	case SKEL_MSG_TYPE:
		((SkelMsg *) buffer)->update(cms);
		break;

	default:
		return(0);
	}
	return 1;
}


// NML Symbol Lookup Function
const char *skelIntf_symbol_lookup(long type)
{
	switch(type)
	{
	case SKEL_ERR_TYPE:
		return "SkelErr";
	case SKEL_MSG_TYPE:
		return "SkelMsg";
	default:
		return"UNKNOWN";
		break;
	}
	return(NULL);
}

/*
*	NML/CMS Update function for SkelErr
*	from skelIntf.hh:0
*/
void SkelErr::update(CMS *cms)
{

	cms->beginClass("SkelErr","NMLmsg");
	cms->update_with_name("timestamp",timestamp);
	cms->update_dla_length_with_name("text_length",text_length);
	cms->update_dla_with_name("text",text,text_length,256);

	cms->endClass("SkelErr","NMLmsg");

}


/*
*	NML/CMS Update function for SkelMsg
*	from skelIntf.hh:31
*/
void SkelMsg::update(CMS *cms)
{

	cms->beginClass("SkelMsg","NMLmsg");
	cms->update_with_name("timestamp",timestamp);
	cms->update_dla_length_with_name("text_length",text_length);
	cms->update_dla_with_name("text",text,text_length,256);

	cms->endClass("SkelMsg","NMLmsg");

}

