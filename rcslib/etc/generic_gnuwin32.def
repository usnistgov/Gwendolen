# Makefile.generic:
# Makefile definitions to be included in makefiles
#  for RCS Utilities and Applications
#  (non-platform specific definitions only)
# - compatible with GNU Make versions 3.55+


#Prevent Multiple Inclusion Warnings
#ifndef GENERIC_MAKEFILE_ALREADY_INCLUDED
GENERIC_MAKEFILE_ALREADY_INCLUDED = 1

# Set default target
ifndef DEFAULT_TARGET
DEFAULT_TARGET = all
endif

default: $(DEFAULT_TARGET)

# Set default RCS directory
ifndef RCSLIB_MAIN_DIR
RCSLIB_MAIN_DIR = /isd/proj/rcslib
endif


ifndef MAKEFILES_DIR
MAKEFILES_DIR = $(RCSLIB_MAIN_DIR)/etc
endif

echo_plat:
	echo $(MAKEFILES_DIR)

ifndef DIR_SEP
DIR_SEP = /
endif

.PHONY: echo_plat

ifndef RCS_LIBRARY_NAME
RCS_LIBRARY_NAME = librcs.a
endif

ifndef PHONY_INCLUDE_DIR
PHONY_INCLUDE_DIR = $(MAKEFILES_DIR)/phony/include
endif

ifndef PLAT
PLAT = $(osrev)
endif


# Define variables for directories.

# The directory stucture under APPDIR or USER_DIR should look like:
# APPDIR/
#       src/                    /* Active Source Files */
#
#       plat/
#               sunos4/ . . .
#               sunos5/ . . .
#               vxworks5.1/ . . .
# where sunos4, sunos5, vxworks5.1 etc are  possible values for $(PLAT)
# Each platform directory should have a directory structure under it like:
# APP_PLAT/
#               src/            /* Archived Source files. */
#               lib/            /* Object and Library files. */
#               bin/            /* Binaries and executables. */
#               include/        /* .h and .hh files */

RCS_INCLUDE = $(RCSLIB_MAIN_DIR)/plat/$(PLAT)/include
RCS_PLATBIN  =  $(RCSLIB_MAIN_DIR)/plat/$(PLAT)/bin
RCS_PLATLIB  = $(RCSLIB_MAIN_DIR)/plat/$(PLAT)/lib
RCS_LIBRARY = $(RCS_PLATLIB)/$(RCS_LIBRARY_NAME)

RCS_INCLUDE_DIR = $(RCS_INCLUDE)
RCS_BIN_DIR = $(RCS_PLATBIN)
RCS_LIB_DIR = $(RCS_PLATLIB)
RCS_SRC_DIR = $(RCSLIB_MAIN_DIR)/plat/$(PLAT)/src

# Set default application directory.


# Set default user directory.
ifndef USER_DIR
USER_DIR = $(HOME)/$(notdir $(APPDIR))
endif

# Set default compiler setup
ifndef COMPILER_SETUP
COMPILER_SETUP = test
endif

APP_PLAT  =  $(APPDIR)/plat/$(PLAT)
USER_PLAT = $(USER_DIR)/plat/$(PLAT)

# Release Directories and Files

RELEASE_DIR = $(APP_PLAT)
RELEASE_INCLUDE_DIR = $(RELEASE_DIR)/include
RELEASE_HEADERS = $(HEADERS:%=$(RELEASE_INCLUDE_DIR)/%)
RELEASE_LIB_DIR = $(RELEASE_DIR)/lib
RELEASE_LIBS = $(LIBS:%=$(RELEASE_LIB_DIR)/%)
ifdef OBJ_EXTENSION
RELEASE_OBJS = $(OBJS:%.o=$(RELEASE_LIB_DIR)/%.$(OBJ_EXTENSION))
else
RELEASE_OBJS = $(OBJS:%=$(RELEASE_LIB_DIR)/%)
endif
RELEASE_BIN_DIR = $(RELEASE_DIR)/bin
RELEASE_BINS = $(BINS:%=$(RELEASE_BIN_DIR)/%)
RELEASE_SRC_DIR  = $(RELEASE_DIR)/src
PRE_RELEASE_SRCS = $(SRCS:%=$(RELEASE_SRC_DIR)/%)

RELEASE_PLATBIN = $(RELEASE_BIN_DIR)
RELEASE_PLATLIB = $(RELEASE_LIB_DIR)

ifndef ARCHIVE_DIRECTORY
ARCHIVE_DIRECTORY = $(APPDIR)/archive
endif

# Development Directories and Files

DEVP_DIR = $(USER_PLAT)
DEVP_INCLUDE_DIR = $(DEVP_DIR)/include
DEVP_HEADERS = $(HEADERS:%=$(DEVP_INCLUDE_DIR)/%)
DEVP_SRC_DIR  = $(DEVP_DIR)/src
PRE_DEVP_SRCS = $(SRCS:%=$(DEVP_SRC_DIR)/%)
DEVP_LIB_DIR = $(DEVP_DIR)/lib
DEVP_LIBS = $(LIBS:%=$(DEVP_LIB_DIR)/%)
DEVP_OBJS = $(OBJS:%=$(DEVP_LIB_DIR)/%)
DEVP_BIN_DIR = $(DEVP_DIR)/bin
DEVP_BINS = $(BINS:%=$(DEVP_BIN_DIR)/%)
OBJECT_CENTER_SRC_FILES = $(SRCS:%.cc=$(DEVP_LIB_DIR)/%.src)

DEVP_PLATBIN = $(DEVP_BIN_DIR)
DEVP_PLATLIB = $(DEVP_LIB_DIR)

# Include the platform specific Makefile definitions.
include $(MAKEFILES_DIR)/$(PLAT).def


ifndef JAVA_RUNTIME
ifndef JAVA_TOOLS_DIR
JAVA_RUNTIME = java
else
JAVA_RUNTIME = $(JAVA_TOOLS_DIR)/java
endif
endif

ifndef JAVA_TOOLS_DIR
JAVA_TOOLS_DIR=/depot/jit/usr/java/bin
endif

ifndef CLASSPATH
CLASSPATH = .:/depot/jit/usr/java/lib/classes.zip
endif

ifndef JAVA_CLASSPATH
JAVA_CLASSPATH = $(CLASSPATH)
endif

# Set Final value of SRCS file with PLAT specific EXTENSIONS
RELEASE_SRCS = $(PRE_RELEASE_SRCS:%.cc=%.$(CPLUSPLUS_EXTENSION))
DEVP_SRCS = $(PRE_DEVP_SRCS:%.cc=%.$(CPLUSPLUS_EXTENSION))

# Generic patterns

# Pattern rules for C and C++ compilation

/users/shackle/%.o: %.d
	echo foo

$(DEVP_LIB_DIR)/%.o:    %.c
	( $(COMPILER_SETUP); \
	$(CC) $< -c $(LOCAL_CFLAGS) \
	 -I$(DEVP_INCLUDE_DIR) -I$(RELEASE_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	 $(CFLAGS) -o $@ )

$(DEVP_LIB_DIR)/%.o:    %.c
	( $(COMPILER_SETUP); \
	$(CC) $< -c $(LOCAL_CFLAGS)  \
	 -I$(DEVP_INCLUDE_DIR) -I$(RELEASE_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	$(CFLAGS) -o $@ )

$(DEVP_LIB_DIR)/%.o:    %.cc %.hh
	( $(COMPILER_SETUP); \
	$(CPLUSPLUS) $< -c $(LOCAL_CFLAGS) $(LOCAL_CPLUSPLUSFLAGS)\
	-I$(DEVP_INCLUDE_DIR) -I$(RELEASE_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	  $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@ )

$(DEVP_LIB_DIR)/%.o:    %.cc
	( $(COMPILER_SETUP); \
	$(CPLUSPLUS) $< -c $(LOCAL_CFLAGS)  $(LOCAL_CPLUSPLUSFLAGS)\
	-I$(DEVP_INCLUDE_DIR) -I$(RELEASE_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	 $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@ )

$(DEVP_LIB_DIR)/%.src:  %.cc %.hh
	!load  $< -c $(LOCAL_CFLAGS) $(LOCAL_CPLUSPLUSFLAGS)\ -I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@

$(DEVP_LIB_DIR)/%.src:  %.cc
	!load $< -c $(LOCAL_CFLAGS)  $(LOCAL_CPLUSPLUSFLAGS) -I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@

$(DEVP_LIB_DIR)/$(SUB_LIB_DIR)/%.o:     %.c %.h
	( $(COMPILER_SETUP); \
	$(CC) $< -c $(LOCAL_CFLAGS) -I$(DEVP_INCLUDE_DIR) \
	 -I$(RCS_INCLUDE) $(CFLAGS) -o $@ )

$(DEVP_LIB_DIR)/$(SUB_LIB_DIR)/%.o:     %.c
	( $(COMPILER_SETUP); \
	$(CC) $< -c $(LOCAL_CFLAGS) -I$(DEVP_INCLUDE_DIR) \
	 -I$(RCS_INCLUDE) $(CFLAGS) -o $@ )

$(DEVP_LIB_DIR)/$(SUB_LIB_DIR)/%.o:     %.cc %.hh
	( $(COMPILER_SETUP); \
	$(CPLUSPLUS) $< -c $(LOCAL_CFLAGS)  $(LOCAL_CPLUSPLUSFLAGS)\
	-I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	 $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@ )

$(DEVP_LIB_DIR)/$(SUB_LIB_DIR)/%.o:     %.cc
	( $(COMPILER_SETUP); \
	$(CPLUSPLUS) $< -c $(LOCAL_CFLAGS)  $(LOCAL_CPLUSPLUSFLAGS)\
	-I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) \
	 $(CFLAGS) $(CPLUSPLUSFLAGS) -o $@ )

# Pattern Rules for copying to the release directory.
INSTALL_COMMANDS = \
	-@ echo installing $@; \
	\rm -f $@; \
	cp $< $@;  \
	chmod a+rw $@; \
	chmod o-w $@;

INSTALL_BIN_COMMANDS = \
	 $(INSTALL_COMMANDS) \
	chmod a+x $@;

$(DEVP_SRC_DIR)/%.$(CPLUSPLUS_EXTENSION): %.cc
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND)  $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_SRC_DIR)/%.rc: %.rc
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND)  $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_SRC_DIR)/%.c: %.c
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_SRC_DIR)/%.s: %.s
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_SRC_DIR)/$(SUB_SRC_DIR)/%.$(CPLUSPLUS_EXTENSION): %.cc
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND)  $< $@
	-@chmod a+rw $@
	-@chmod o-w $@


$(DEVP_SRC_DIR)/$(SUB_SRC_DIR)/%.c: %.c
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@


$(DEVP_SRC_DIR)/$(SUB_SRC_DIR)/%.s: %.s
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@


$(DEVP_INCLUDE_DIR)/%.hh: %.hh
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@


$(DEVP_INCLUDE_DIR)/%.h: %.h
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_INCLUDE_DIR)/%.rh: %.rh
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_INCLUDE_DIR)/$(SUB_INCLUDE_DIR)/%.hh: %.hh
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@

$(DEVP_INCLUDE_DIR)/$(SUB_INCLUDE_DIR)/%.h: %.h
	-@\rm -f $@;
	$(COPY_SOURCE_COMMAND) $< $@
	-@chmod a+rw $@
	-@chmod o-w $@


$(RELEASE_INCLUDE_DIR)/%: $(DEVP_INCLUDE_DIR)/%
	$(INSTALL_COMMANDS)

$(RELEASE_LIB_DIR)/%: $(DEVP_LIB_DIR)/%
	$(INSTALL_COMMANDS)

$(RELEASE_BIN_DIR)/%: $(DEVP_BIN_DIR)/%
	$(INSTALL_BIN_COMMANDS)

$(RELEASE_SRC_DIR)/%: $(DEVP_SRC_DIR)/%
	$(INSTALL_COMMANDS)

$(RELEASE_INCLUDE_DIR)/$(SUB_INCLUDE_DIR)/%: \
	$(DEVP_INCLUDE_DIR)/$(SUB_INCLUDE_DIR)/%
	$(INSTALL_COMMANDS)

$(RELEASE_LIB_DIR)/$(SUB_LIB_DIR)/%: $(DEVP_LIB_DIR)/$(SUB_LIB_DIR)/%
	$(INSTALL_COMMANDS)

$(RELEASE_BIN_DIR)/$(SUB_BIN_DIR)/%: $(DEVP_BIN_DIR)/$(SUB_BIN_DIR)/%
	$(INSTALL_BIN_COMMANDS)

# Phony Targets


ifdef NO_COMPILING
all: $(DEVP_HEADERS)  $(DEVP_SRCS)

else
all: $(DEVP_HEADERS) $(DEVP_SRCS) $(DEVP_OBJS) $(DEVP_LIBS) $(DEVP_BINS)

endif



sources: $(DEVP_HEADERS) $(DEVP_SRCS) sources_message

sources_message:
	-@ echo Sources = $(DEVP_SRCS)

headers: $(DEVP_HEADERS) headers_message

headers_message:
	-@ echo Headers = $(DEVP_HEADERS)

# Print a Warning for chip users.
lynx_warn:
	-@ echo NOTE: On chip make_dirs and make_depend don't function \
	-@ echo properly.
	-@ echo *To create directory structure for lynx plats run:
	-@ echo gnumake make_dirs PLAT=lynx
	-@ echo from a sun.
	-@ echo *To update dependancies run:
	-@ echo gnumake depend PLAT=lynx
	-@ echo from a sun.
# This odd rule structure allows a master Makefile to add commands for
# depend all clean or install like executing sub-makes with these targets.

ifeq ($(MAKELEVEL), 0)
depend: depend_message depend_commands
else
depend:  depend_commands
endif

depend_message:
	-@ echo Updating dependancies.

ifdef SUB_LIB_DIR
depend_commands:
	-@ if (test ! -f .depend.$(PLAT) )\
	  then touch .depend.$(PLAT); \
	fi;
	-$(MAKEDEPEND)\
		-f .depend.$(PLAT) \
		-p$$\(DEVP_LIB_DIR\)/$$\(SUB_LIB_DIR\)/ \
		-- $(LOCAL_CFLAGS) $(LOCAL_CPLUSPLUSFLAGS) \
		-I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) -I$(PHONY_INCLUDE_DIR) \
		$(CFLAGS) $(CPLUSPLUSFLAGS) \
		  -- $(notdir $(SRCS))
	-@ rm -f .depend
	-@ cat .depend.$(PLAT) | sed s#$(RCS_INCLUDE)#$$\(RCS_INCLUDE\)# | \
	sed s#$(DEVP_INCLUDE_DIR)#$$\(DEVP_INCLUDE_DIR\)# | \
	sed s#$(PHONY_INCLUDE_DIR)#$$\(PHONY_INCLUDE_DIR\)# >> .depend


else    # SUB_LIB_DEF defined?

depend_commands:
	-@ if (test ! -f .depend.$(PLAT) )\
	  then touch .depend.$(PLAT); \
	fi;
	-$(MAKEDEPEND) \
		-f .depend.$(PLAT) \
		-p$$\(DEVP_LIB_DIR\)/ \
		-- $(LOCAL_CFLAGS) $(LOCAL_CPLUSPLUSFLAGS) \
		-I$(DEVP_INCLUDE_DIR) -I$(RCS_INCLUDE) -I$(PHONY_INCLUDE_DIR) \
		$(CFLAGS) $(CPLUSPLUSFLAGS) \
		 -- $(SRCS)
	-@ rm -f .depend
	-@ cat .depend.$(PLAT) | sed s#$(RCS_INCLUDE)#$$\(RCS_INCLUDE\)# | \
	sed s#$(DEVP_INCLUDE_DIR)#$$\(DEVP_INCLUDE_DIR\)# | \
	sed s#$(PHONY_INCLUDE_DIR)#$$\(PHONY_INCLUDE_DIR\)# >> .depend




endif   # SUB_LIB_DEF defined?

clean_all: clean delete

clean: clean_commands

clean_commands:
	-\rm -f $(DEVP_OBJS)
	-\rm -f $(DEVP_LIBS)
	-\rm -f $(DEVP_BINS)
	-\rm -f $(DEVP_HEADERS)


delete:  delete_commands

delete_commands:
	-\rm -f $(RELEASE_OBJS)
	-\rm -f $(RELEASE_LIBS)
	-\rm -f $(RELEASE_SRCS)
	-\rm -f $(RELEASE_BINS)
	-\rm -f $(RELEASE_HEADERS)


ifdef  NO_COMPILING
install: $(RELEASE_HEADERS) $(RELEASE_SRCS) $(RELEASE_LIBS) $(RELEASE_BINS) \
	log_install_message

else
ifneq ($(PLAT), lynx)
install: $(RELEASE_HEADERS) $(RELEASE_SRCS) $(RELEASE_OBJS) $(RELEASE_LIBS) \
	$(RELEASE_BINS) log_install_message
else
install: depend $(RELEASE_HEADERS) $(RELEASE_SRCS) $(RELEASE_OBJS) \
	$(RELEASE_LIBS) \
	$(RELEASE_BINS) log_install_message

endif
endif

force_install: force_install_commands

force_install_commands:
	-install -m 664 $(DEVP_HEADERS) $(RELEASE_INCLUDE_DIR)
	-install -m 664 $(DEVP_LIBS) $(RELEASE_LIB_DIR)
	-install -m 664 $(DEVP_OBJS) $(RELEASE_LIB_DIR)
	-install -m 664 $(DEVP_BINS) $(RELEASE_BIN_DIR)
	-install -m 664 $(DEVP_SRCS) $(RELEASE_SRC_DIR)

blind_install:
	-@\rm -f $(RELEASE_BIN_DIR)/*
	-\cp  $(DEVP_BIN_DIR)/* $(RELEASE_BIN_DIR)
	-@chmod 664 $(RELEASE_BIN_DIR)/*
	-@\rm -f $(RELEASE_LIB_DIR)/*
	-\cp  $(DEVP_LIB_DIR)/* $(RELEASE_LIB_DIR)
	-@chmod 664 $(RELEASE_LIB_DIR)/*
	-@\rm -f $(RELEASE_SRC_DIR)/*
	-\cp $(DEVP_SRC_DIR)/* $(RELEASE_SRC_DIR)
	-@chmod 664 $(RELEASE_SRC_DIR)/*
	-@\rm -f $(RELEASE_INCLUDE_DIR)/*
	-\cp $(DEVP_INCLUDE_DIR)/* $(RELEASE_INCLUDE_DIR)
	-@chmod 664 $(RELEASE_INCLUDE_DIR)/*

log_install_message:
	-@ if (test ! -f $(APPDIR)/.log )\
	  then touch $(APPDIR)/.log; chmod 666 $(APPDIR)/.log; \
	fi;
	-@echo Logging install message.
	-@echo On  `date`, $(LOGNAME) installed `pwd` >>$(APPDIR)/.log
	-@echo for $(PLAT) to $(RELEASE_DIR) >>$(APPDIR)/.log
	-@echo using $(HOST) with $(osrev) >>$(APPDIR)/.log
	-@echo Headers = $(HEADERS) >>$(APPDIR)/.log
	-@echo Srcs = $(SRCS) >>$(APPDIR)/.log
	-@echo Objs = $(OBJS) >>$(APPDIR)/.log
	-@echo Libs = $(LIBS) >>$(APPDIR)/.log
	-@echo Bins = $(BINS) >>$(APPDIR)/.log

print_variables:
	-@echo OBJS = $(OBJS)
	-@echo LIBS = $(LIBS)
	-@echo BINS = $(BINS)
	-@echo SRCS = $(SRCS)
	-@echo HEADERS = $(HEADERS)
	-@echo DEVP_OBJS = $(DEVP_OBJS)
	-@echo DEVP_LIBS = $(DEVP_LIBS)
	-@echo DEVP_BINS = $(DEVP_BINS)
	-@echo DEVP_SRCS = $(DEVP_SRCS)
	-@echo DEVP_HEADERS = $(DEVP_HEADERS)
	-@echo RELEASE_OBJS = $(RELEASE_OBJS)
	-@echo RELEASE_LIBS = $(RELEASE_LIBS)
	-@echo RELEASE_BINS = $(RELEASE_BINS)
	-@echo RELEASE_SRCS = $(RELEASE_SRCS)
	-@echo RELEASE_HEADERS = $(RELEASE_HEADERS)


# Declare PHONY targets to be PHONY

# load_source: $(OBJECT_CENTER_SRC_FILES) loadsource_message

# load_source_message:
#       echo $(OBJECT_CENTER_SRC_FILES)
# .PHONY load_source load_source_message

.PHONY: all install depend depend_commands force_install force_install_commands

.PHONY: delete delete_commands sources headers

.PHONY: clean clean_commands clean_all log_install_message sources_message

#.PHONY: run_setup_script


# Local dependancies

ifdef USE_SEPARATE_DEPENDS
include .depend.$(PLAT)
else
include .depend
endif

.depend.$(PLAT):
	touch .depend
	cp .depend $@


.depend:
	touch $@

.PRECIOUS: $(SRCS) $(HEADERS) $(RELEASE_SRCS) $(RELEASE_HEADERS)


#endif
# to match ifndef MAKEFILE_GENERIC_ALREADY_INCLUDED
#endif


# Create a phony target for debug purposes.

printenv:
	-@echo PLAT = $(PLAT)
	-@echo RCS_INSTALL_DIRECTORY = $(RCS_INSTALL_DIRECTORY)
	-@echo RCSLIB_MAIN_DIR = $(RCSLIB_MAIN_DIR)
	-@echo GENERIC_MAKEFILE = $(GENERIC_MAKEFILE)
	-@echo APPDIR = $(APPDIR)
	-@echo USER_DIR = $(USER_DIR)
	-@echo MAKEFILES_DIR = $(MAKEFILES_DIR)
	-@echo RCS_LIBRARY_NAME = $(RCS_LIBRARY_NAME)
	-@echo PHONY_INCLUDE_DIR = $(PHONY_INCLUDE_DIR)
	-@echo RCS_INCLUDE = $(RCS_INCLUDE)
	-@echo RCS_PLATBIN = $(RCS_PLATBIN)
	-@echo RCS_PLATLIB = $(RCS_PLATLIB)
	-@echo RCS_LIBRARY = $(RCS_LIBRARY)
	-@echo ARCHIVE_DIRECTORY = $(ARCHIVE_DIRECTORY)
	-@echo CFLAGS = $(CFLAGS)
	-@echo LOCAL_CFLAGS = $(LOCAL_CFLAGS)
	-@echo CPLUSPLUSFLAGS = $(CPLUSPLUSFLAGS)
	-@echo LOCAL_CPLUSPLUSFLAGS = $(LOCAL_CPLUSPLUSFLAGS)
	-@echo DEFAULT_TARGET = $(DEFAULT_TARGET)
	-@echo RELEASE_DIR = $(RELEASE_DIR)
	-@echo RELEASE_INCLUDE_DIR = $(RELEASE_INCLUDE_DIR)
	-@echo RELEASE_LIB_DIR = $(RELEASE_LIB_DIR)
	-@echo RELEASE_BIN_DIR = $(RELEASE_BIN_DIR)
	-@echo RELEASE_SRC_DIR = $(RELEASE_SRC_DIR)
	-@echo RELEASE_HEADERS = $(RELEASE_HEADERS)
	-@echo RELEASE_LIBS = $(RELEASE_LIBS)
	-@echo RELEASE_OBJS = $(RELEASE_OBJS)
	-@echo RELEASE_BINS = $(RELEASE_BINS)
	-@echo DEVP_DIR = $(DEVP_DIR)
	-@echo DEVP_INCLUDE_DIR = $(DEVP_INCLUDE_DIR)
	-@echo DEVP_LIB_DIR = $(DEVP_LIB_DIR)
	-@echo DEVP_BIN_DIR = $(DEVP_BIN_DIR)
	-@echo DEVP_SRC_DIR = $(DEVP_SRC_DIR)
	-@echo DEVP_HEADERS = $(DEVP_HEADERS)
	-@echo DEVP_LIBS = $(DEVP_LIBS)
	-@echo DEVP_OBJS = $(DEVP_OBJS)
	-@echo DEVP_BINS = $(DEVP_BINS)
	-@printenv

.PHONY: printenv
