/* 
The NIST RCS (Real-time Control Systems) 
 library is public domain software, however it is preferred
 that the following disclaimers be attached.

Software Copywrite/Warranty Disclaimer

   This software was developed at the National Institute of Standards and
Technology by employees of the Federal Government in the course of their
official duties. Pursuant to title 17 Section 105 of the United States
Code this software is not subject to copyright protection and is in the
public domain. NIST Real-Time Control System software is an experimental
system. NIST assumes no responsibility whatsoever for its use by other
parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic. We would appreciate
acknowledgement if the software is used. This software can be
redistributed and/or modified freely provided that any derivative works
bear some notice that they are derived from it, and any modified
versions bear some notice that they have been modified.



*/ 

/*
*       New Java File starts here.
*       This file should be named PmHomogeneous.java
*/


// Set Package Name
package rcs.posemath;

// Import all NML, CMS, and RCS classes and interfaces
import rcs.nml.NMLFormatConverter;

/*
*       Class definition for PmHomogeneous
*       Automatically generated by RCS Java Diagnostics Tool.
*       on Wed Jan 07 10:53:42 EST 1998
*/
public class PmHomogeneous
{
  public PmCartesian tran = new PmCartesian();
  public PmRotationMatrix rot = new PmRotationMatrix();

  public float [] toMatf() {
      float matf[] = new float[16];
      matf[0] = (float) rot.x.x; matf[1] = (float) rot.y.x; matf[2] = (float) rot.z.x;
      matf[4] = (float) rot.x.y; matf[5] = (float) rot.y.y; matf[6] = (float) rot.z.y;
      matf[8] = (float) rot.x.z; matf[9] = (float) rot.y.z; matf[10] = (float) rot.z.z;
      matf[3] = (float) tran.x;
      matf[7] = (float) tran.y;
      matf[11] = (float) tran.z;
      matf[12] =0f; matf[13] = 0f; matf[14] = 0f; matf[15] = 1f;
      return matf;
  }

  public float [] toMatfTranspose() {
      float matf[] = new float[16];
      matf[0] = (float) rot.x.x; matf[4] = (float) rot.y.x; matf[8] = (float) rot.z.x;
      matf[1] = (float) rot.x.y; matf[5] = (float) rot.y.y; matf[9] = (float) rot.z.y;
      matf[2] = (float) rot.x.z; matf[6] = (float) rot.y.z; matf[10] = (float) rot.z.z;
      matf[12] = (float) tran.x;
      matf[13] = (float) tran.y;
      matf[14] = (float) tran.z;
      matf[3] =0f; matf[7] = 0f; matf[11] = 0f; matf[15] = 1f;
      return matf;
  }

  public double [][] toMatdd() {
      return new double[][] {
      {rot.x.x, rot.y.x, rot.z.x, tran.x},
      {rot.x.y, rot.y.y, rot.z.y, tran.y},
      {rot.x.z, rot.y.z, rot.z.z, tran.z},
      {0, 0, 0, 1}
      };
  }

  public  PmHomogeneous( float matf[]) {
      //float matf[] = new float[16];
      rot.x.x = matf[0]; rot.y.x = matf[1]; rot.z.x = matf[2];
      rot.x.y = matf[4]; rot.y.y = matf[5]; rot.z.y = matf[6];
      rot.x.z = matf[8]; rot.y.z = matf[9]; rot.z.z = matf[10];
      tran.x = matf[3];
      tran.y = matf[7];
      tran.z = matf[11];
  }

  public  PmHomogeneous( double matdd[][]) {
      //float matf[] = new float[16];
      if(matdd == null || matdd.length != 4 || matdd[0].length != 4) {
          throw new IllegalArgumentException("PmHomogeneous : Matrix must be 4x4");
      }
      rot.x.x = matdd[0][0]; rot.y.x = matdd[0][1]; rot.z.x = matdd[0][2];
      rot.x.y = matdd[1][0]; rot.y.y = matdd[1][1]; rot.z.y = matdd[1][2];
      rot.x.z = matdd[2][0]; rot.y.z = matdd[2][1]; rot.z.z = matdd[2][2];
      tran.x = matdd[0][3];
      tran.y = matdd[1][3];
      tran.z = matdd[2][3];
  }
  
  public void update(NMLFormatConverter nml_fc)
  {
      nml_fc.beginClass("PmHomogeneous",null);
      nml_fc.beginClassVar("tran");
      tran.update(nml_fc);
      nml_fc.endClassVar("tran");
      nml_fc.beginClassVar("rot");
      rot.update(nml_fc);
      nml_fc.endClassVar("rot");
      nml_fc.endClass("PmHomogeneous",null);
  }

  public PmHomogeneous()
  {
  }

  public PmHomogeneous(PmCartesian starttran, PmRotationMatrix startrot)
  {
    tran = starttran;
    rot = startrot;
  }
}
