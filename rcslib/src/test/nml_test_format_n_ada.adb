--
--	New Ada Body File starts here.
--	This file should be named nml_test_format_n_ada.adb
--	Automatically generated by NML CodeGen Java Applet.


with Nml_Msg; use Nml_Msg;

with Posemath_N_Ada;  use Posemath_N_Ada;

with Cms;

-- Include other package files  that contain message definitions we might need.
with otherheader_n_ada; use otherheader_n_ada;

--	Some standard Ada Packages we always need.
with Unchecked_Deallocation;
with Unchecked_Conversion;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings; use Interfaces.C.Strings;

package body nml_test_format_n_ada is

	-- Create some common variables  and functions needed for updating Enumeration types.
	Enum_RCS_ADMIN_STATE_Name_List : constant Char_Array(1..100) := (
		'A','D','M','I','N','_','I','N','I','T','I','A','L','I','Z','E','D',nul,nul,nul,
		'A','D','M','I','N','_','S','H','U','T','_','D','O','W','N',nul,nul,nul,nul,nul,
		'A','D','M','I','N','_','U','N','I','N','I','T','I','A','L','I','Z','E','D',nul,
		'R','C','S','_','A','D','M','I','N','_','Z','E','R','O',nul,nul,nul,nul,nul,nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_RCS_ADMIN_STATE_Int_List : constant Cms.Int_Array(1..5) := (
		2, -- ADMIN_INITIALIZED
		3, -- ADMIN_SHUT_DOWN
		1, -- ADMIN_UNINITIALIZED
		0, -- RCS_ADMIN_ZERO
		-1
		);
	enum_RCS_ADMIN_STATE_ADMIN_INITIALIZED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_INITIALIZED");
	enum_RCS_ADMIN_STATE_ADMIN_SHUT_DOWN_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_SHUT_DOWN");
	enum_RCS_ADMIN_STATE_ADMIN_UNINITIALIZED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_UNINITIALIZED");
	enum_RCS_ADMIN_STATE_RCS_ADMIN_ZERO_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_ADMIN_ZERO");
	function Enum_RCS_ADMIN_STATE_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_RCS_ADMIN_STATE_Symbol_Lookup,"ada_RCS_ADMIN_STATE_nml_test_format_n_ada_symbol_lookup");

	function Enum_RCS_ADMIN_STATE_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 2	=>	return enum_RCS_ADMIN_STATE_ADMIN_INITIALIZED_Key_Name; -- ADMIN_INITIALIZED
			when 3	=>	return enum_RCS_ADMIN_STATE_ADMIN_SHUT_DOWN_Key_Name; -- ADMIN_SHUT_DOWN
			when 1	=>	return enum_RCS_ADMIN_STATE_ADMIN_UNINITIALIZED_Key_Name; -- ADMIN_UNINITIALIZED
			when 0	=>	return enum_RCS_ADMIN_STATE_RCS_ADMIN_ZERO_Key_Name; -- RCS_ADMIN_ZERO
			when others	=>	return Null_Ptr;
		end case;
	end Enum_RCS_ADMIN_STATE_Symbol_Lookup;

	function Enum_RCS_ADMIN_STATE_To_Int(enum_val: in RCS_ADMIN_STATE) return int is
	begin
		case enum_val is
			when ADMIN_INITIALIZED	=>	return 2;
			when ADMIN_UNINITIALIZED	=>	return 1;
			when ADMIN_SHUT_DOWN	=>	return 3;
			when RCS_ADMIN_ZERO	=>	return 0;
			when Bad_RCS_ADMIN_STATE_Value	=>	return -1;
		end case;
	end Enum_RCS_ADMIN_STATE_To_Int;

	function Int_To_Enum_RCS_ADMIN_STATE(enum_int: in int) return RCS_ADMIN_STATE is
	begin
		case enum_int is
			when 2	=>	return ADMIN_INITIALIZED;
			when 1	=>	return ADMIN_UNINITIALIZED;
			when 3	=>	return ADMIN_SHUT_DOWN;
			when 0	=>	return RCS_ADMIN_ZERO;
			when others	=>	return Bad_RCS_ADMIN_STATE_Value;
		end case;
	end Int_To_Enum_RCS_ADMIN_STATE;

	Enum_RCS_ADMIN_STATE_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"RCS_ADMIN_STATE",
			Enum_RCS_ADMIN_STATE_Name_List,
			Enum_RCS_ADMIN_STATE_Int_List,
			20,
			5,
			Enum_RCS_ADMIN_STATE_Symbol_Lookup'Access);

	Enum_enumtest_typedef_Name_List : constant Char_Array(1..16) := (
		'x','x','x',nul,
		'y','y','y',nul,
		'z','z','z',nul,
		nul,nul,nul,nul
		);
	Enum_enumtest_typedef_Int_List : constant Cms.Int_Array(1..4) := (
		2, -- xxx
		1, -- yyy
		0, -- zzz
		-1
		);
	enum_enumtest_typedef_xxx_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("xxx");
	enum_enumtest_typedef_yyy_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("yyy");
	enum_enumtest_typedef_zzz_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("zzz");
	function Enum_enumtest_typedef_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_enumtest_typedef_Symbol_Lookup,"ada_enumtest_typedef_nml_test_format_n_ada_symbol_lookup");

	function Enum_enumtest_typedef_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 2	=>	return enum_enumtest_typedef_xxx_Key_Name; -- xxx
			when 1	=>	return enum_enumtest_typedef_yyy_Key_Name; -- yyy
			when 0	=>	return enum_enumtest_typedef_zzz_Key_Name; -- zzz
			when others	=>	return Null_Ptr;
		end case;
	end Enum_enumtest_typedef_Symbol_Lookup;

	function Enum_enumtest_typedef_To_Int(enum_val: in enumtest_typedef) return int is
	begin
		case enum_val is
			when xxx	=>	return 2;
			when zzz	=>	return 0;
			when yyy	=>	return 1;
			when Bad_enumtest_typedef_Value	=>	return -1;
		end case;
	end Enum_enumtest_typedef_To_Int;

	function Int_To_Enum_enumtest_typedef(enum_int: in int) return enumtest_typedef is
	begin
		case enum_int is
			when 2	=>	return xxx;
			when 0	=>	return zzz;
			when 1	=>	return yyy;
			when others	=>	return Bad_enumtest_typedef_Value;
		end case;
	end Int_To_Enum_enumtest_typedef;

	Enum_enumtest_typedef_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"enumtest_typedef",
			Enum_enumtest_typedef_Name_List,
			Enum_enumtest_typedef_Int_List,
			4,
			4,
			Enum_enumtest_typedef_Symbol_Lookup'Access);

	Enum_RCS_STATUS_Name_List : constant Char_Array(1..105) := (
		'R','C','S','_','D','O','N','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'R','C','S','_','E','R','R','O','R',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'R','C','S','_','E','X','E','C',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'U','N','I','N','I','T','I','A','L','I','Z','E','D','_','S','T','A','T','U','S',nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_RCS_STATUS_Int_List : constant Cms.Int_Array(1..5) := (
		1, -- RCS_DONE
		3, -- RCS_ERROR
		2, -- RCS_EXEC
		-1, -- UNINITIALIZED_STATUS
		-1
		);
	enum_RCS_STATUS_RCS_DONE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_DONE");
	enum_RCS_STATUS_RCS_ERROR_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_ERROR");
	enum_RCS_STATUS_RCS_EXEC_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_EXEC");
	enum_RCS_STATUS_UNINITIALIZED_STATUS_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UNINITIALIZED_STATUS");
	function Enum_RCS_STATUS_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_RCS_STATUS_Symbol_Lookup,"ada_RCS_STATUS_nml_test_format_n_ada_symbol_lookup");

	function Enum_RCS_STATUS_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 1	=>	return enum_RCS_STATUS_RCS_DONE_Key_Name; -- RCS_DONE
			when 3	=>	return enum_RCS_STATUS_RCS_ERROR_Key_Name; -- RCS_ERROR
			when 2	=>	return enum_RCS_STATUS_RCS_EXEC_Key_Name; -- RCS_EXEC
			when -1	=>	return enum_RCS_STATUS_UNINITIALIZED_STATUS_Key_Name; -- UNINITIALIZED_STATUS
			when others	=>	return Null_Ptr;
		end case;
	end Enum_RCS_STATUS_Symbol_Lookup;

	function Enum_RCS_STATUS_To_Int(enum_val: in RCS_STATUS) return int is
	begin
		case enum_val is
			when RCS_EXEC	=>	return 2;
			when RCS_DONE	=>	return 1;
			when RCS_ERROR	=>	return 3;
			when UNINITIALIZED_STATUS	=>	return -1;
			when Bad_RCS_STATUS_Value	=>	return -1;
		end case;
	end Enum_RCS_STATUS_To_Int;

	function Int_To_Enum_RCS_STATUS(enum_int: in int) return RCS_STATUS is
	begin
		case enum_int is
			when 2	=>	return RCS_EXEC;
			when 1	=>	return RCS_DONE;
			when 3	=>	return RCS_ERROR;
			when -1	=>	return UNINITIALIZED_STATUS;
			when others	=>	return Bad_RCS_STATUS_Value;
		end case;
	end Int_To_Enum_RCS_STATUS;

	Enum_RCS_STATUS_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"RCS_STATUS",
			Enum_RCS_STATUS_Name_List,
			Enum_RCS_STATUS_Int_List,
			21,
			5,
			Enum_RCS_STATUS_Symbol_Lookup'Access);

	Enum_enumtest3ftoh_Name_List : constant Char_Array(1..16) := (
		'f','f','f',nul,
		'g','g','g',nul,
		'h','h','h',nul,
		nul,nul,nul,nul
		);
	Enum_enumtest3ftoh_Int_List : constant Cms.Int_Array(1..4) := (
		0, -- fff
		1, -- ggg
		2, -- hhh
		-1
		);
	enum_enumtest3ftoh_fff_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("fff");
	enum_enumtest3ftoh_ggg_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ggg");
	enum_enumtest3ftoh_hhh_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("hhh");
	function Enum_enumtest3ftoh_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_enumtest3ftoh_Symbol_Lookup,"ada_enumtest3ftoh_nml_test_format_n_ada_symbol_lookup");

	function Enum_enumtest3ftoh_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 0	=>	return enum_enumtest3ftoh_fff_Key_Name; -- fff
			when 1	=>	return enum_enumtest3ftoh_ggg_Key_Name; -- ggg
			when 2	=>	return enum_enumtest3ftoh_hhh_Key_Name; -- hhh
			when others	=>	return Null_Ptr;
		end case;
	end Enum_enumtest3ftoh_Symbol_Lookup;

	function Enum_enumtest3ftoh_To_Int(enum_val: in enumtest3ftoh) return int is
	begin
		case enum_val is
			when fff	=>	return 0;
			when hhh	=>	return 2;
			when ggg	=>	return 1;
			when Bad_enumtest3ftoh_Value	=>	return -1;
		end case;
	end Enum_enumtest3ftoh_To_Int;

	function Int_To_Enum_enumtest3ftoh(enum_int: in int) return enumtest3ftoh is
	begin
		case enum_int is
			when 0	=>	return fff;
			when 2	=>	return hhh;
			when 1	=>	return ggg;
			when others	=>	return Bad_enumtest3ftoh_Value;
		end case;
	end Int_To_Enum_enumtest3ftoh;

	Enum_enumtest3ftoh_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"enumtest3ftoh",
			Enum_enumtest3ftoh_Name_List,
			Enum_enumtest3ftoh_Int_List,
			4,
			4,
			Enum_enumtest3ftoh_Symbol_Lookup'Access);

	Enum_enumtest_typedef2_Name_List : constant Char_Array(1..16) := (
		'u','u','u',nul,
		'v','v','v',nul,
		'w','w','w',nul,
		nul,nul,nul,nul
		);
	Enum_enumtest_typedef2_Int_List : constant Cms.Int_Array(1..4) := (
		2, -- uuu
		1, -- vvv
		0, -- www
		-1
		);
	enum_enumtest_typedef2_uuu_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("uuu");
	enum_enumtest_typedef2_vvv_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("vvv");
	enum_enumtest_typedef2_www_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("www");
	function Enum_enumtest_typedef2_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_enumtest_typedef2_Symbol_Lookup,"ada_enumtest_typedef2_nml_test_format_n_ada_symbol_lookup");

	function Enum_enumtest_typedef2_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 2	=>	return enum_enumtest_typedef2_uuu_Key_Name; -- uuu
			when 1	=>	return enum_enumtest_typedef2_vvv_Key_Name; -- vvv
			when 0	=>	return enum_enumtest_typedef2_www_Key_Name; -- www
			when others	=>	return Null_Ptr;
		end case;
	end Enum_enumtest_typedef2_Symbol_Lookup;

	function Enum_enumtest_typedef2_To_Int(enum_val: in enumtest_typedef2) return int is
	begin
		case enum_val is
			when uuu	=>	return 2;
			when www	=>	return 0;
			when vvv	=>	return 1;
			when Bad_enumtest_typedef2_Value	=>	return -1;
		end case;
	end Enum_enumtest_typedef2_To_Int;

	function Int_To_Enum_enumtest_typedef2(enum_int: in int) return enumtest_typedef2 is
	begin
		case enum_int is
			when 2	=>	return uuu;
			when 0	=>	return www;
			when 1	=>	return vvv;
			when others	=>	return Bad_enumtest_typedef2_Value;
		end case;
	end Int_To_Enum_enumtest_typedef2;

	Enum_enumtest_typedef2_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"enumtest_typedef2",
			Enum_enumtest_typedef2_Name_List,
			Enum_enumtest_typedef2_Int_List,
			4,
			4,
			Enum_enumtest_typedef2_Symbol_Lookup'Access);

	Enum_enumtest_Name_List : constant Char_Array(1..32) := (
		'a',nul,nul,nul,
		'a','a',nul,nul,
		'b',nul,nul,nul,
		'b','b',nul,nul,
		'c','c','c',nul,
		'd','d',nul,nul,
		'e',nul,nul,nul,
		nul,nul,nul,nul
		);
	Enum_enumtest_Int_List : constant Cms.Int_Array(1..8) := (
		0, -- a
		2, -- aa
		1, -- b
		3, -- bb
		99, -- ccc
		77, -- dd
		88, -- e
		-1
		);
	enum_enumtest_a_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("a");
	enum_enumtest_aa_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("aa");
	enum_enumtest_b_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("b");
	enum_enumtest_bb_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("bb");
	enum_enumtest_ccc_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ccc");
	enum_enumtest_dd_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("dd");
	enum_enumtest_e_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("e");
	function Enum_enumtest_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_enumtest_Symbol_Lookup,"ada_enumtest_nml_test_format_n_ada_symbol_lookup");

	function Enum_enumtest_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 0	=>	return enum_enumtest_a_Key_Name; -- a
			when 2	=>	return enum_enumtest_aa_Key_Name; -- aa
			when 1	=>	return enum_enumtest_b_Key_Name; -- b
			when 3	=>	return enum_enumtest_bb_Key_Name; -- bb
			when 99	=>	return enum_enumtest_ccc_Key_Name; -- ccc
			when 77	=>	return enum_enumtest_dd_Key_Name; -- dd
			when 88	=>	return enum_enumtest_e_Key_Name; -- e
			when others	=>	return Null_Ptr;
		end case;
	end Enum_enumtest_Symbol_Lookup;

	function Enum_enumtest_To_Int(enum_val: in enumtest) return int is
	begin
		case enum_val is
			when dd	=>	return 77;
			when b	=>	return 1;
			when a	=>	return 0;
			when e	=>	return 88;
			when aa	=>	return 2;
			when bb	=>	return 3;
			when ccc	=>	return 99;
			when Bad_enumtest_Value	=>	return -1;
		end case;
	end Enum_enumtest_To_Int;

	function Int_To_Enum_enumtest(enum_int: in int) return enumtest is
	begin
		case enum_int is
			when 77	=>	return dd;
			when 1	=>	return b;
			when 0	=>	return a;
			when 88	=>	return e;
			when 2	=>	return aa;
			when 3	=>	return bb;
			when 99	=>	return ccc;
			when others	=>	return Bad_enumtest_Value;
		end case;
	end Int_To_Enum_enumtest;

	Enum_enumtest_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"enumtest",
			Enum_enumtest_Name_List,
			Enum_enumtest_Int_List,
			4,
			8,
			Enum_enumtest_Symbol_Lookup'Access);

	Enum_anonymous_enum_nml_test_format_hh_82_Name_List : constant Char_Array(1..360) := (
		'B','U','I','L','D','I','N','G',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'B','U','I','L','D','I','N','G','C','O','N','N','E','C','T','O','R',nul,
		'C','O','N','C','R','E','T','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'D','R','I','V','E','P','A','V','E','D',nul,nul,nul,nul,nul,nul,nul,nul,
		'I','N','I','T',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'L','A','K','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'L','A','M','P',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'L','I','G','H','T','P','O','L','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'P','A','R','K','I','N','G','P','A','V','E','D',nul,nul,nul,nul,nul,nul,
		'S','H','R','U','B',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','I','D','E','W','A','L','K',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','I','G','N',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','T','E','P','S',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','U','B','S','T','A','T','I','O','N',nul,nul,nul,nul,nul,nul,nul,nul,
		'T','R','E','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'T','R','E','E','S',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'U','N','K','N','O','W','N',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'U','T','I','L','I','T','Y','B','O','X',nul,nul,nul,nul,nul,nul,nul,nul,
		'U','T','I','L','I','T','Y','P','O','L','E',nul,nul,nul,nul,nul,nul,nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_anonymous_enum_nml_test_format_hh_82_Int_List : constant Cms.Int_Array(1..20) := (
		4, -- BUILDING
		7, -- BUILDINGCONNECTOR
		8, -- CONCRETE
		6, -- DRIVEPAVED
		0, -- INIT
		11, -- LAKE
		18, -- LAMP
		17, -- LIGHTPOLE
		3, -- PARKINGPAVED
		14, -- SHRUB
		1, -- SIDEWALK
		16, -- SIGN
		9, -- STEPS
		10, -- SUBSTATION
		15, -- TREE
		5, -- TREES
		2, -- UNKNOWN
		12, -- UTILITYBOX
		13, -- UTILITYPOLE
		-1
		);
	enum_anonymous_enum_nml_test_format_hh_82_BUILDING_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("BUILDING");
	enum_anonymous_enum_nml_test_format_hh_82_BUILDINGCONNECTOR_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("BUILDINGCONNECTOR");
	enum_anonymous_enum_nml_test_format_hh_82_CONCRETE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("CONCRETE");
	enum_anonymous_enum_nml_test_format_hh_82_DRIVEPAVED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("DRIVEPAVED");
	enum_anonymous_enum_nml_test_format_hh_82_INIT_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("INIT");
	enum_anonymous_enum_nml_test_format_hh_82_LAKE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("LAKE");
	enum_anonymous_enum_nml_test_format_hh_82_LAMP_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("LAMP");
	enum_anonymous_enum_nml_test_format_hh_82_LIGHTPOLE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("LIGHTPOLE");
	enum_anonymous_enum_nml_test_format_hh_82_PARKINGPAVED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("PARKINGPAVED");
	enum_anonymous_enum_nml_test_format_hh_82_SHRUB_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SHRUB");
	enum_anonymous_enum_nml_test_format_hh_82_SIDEWALK_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SIDEWALK");
	enum_anonymous_enum_nml_test_format_hh_82_SIGN_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SIGN");
	enum_anonymous_enum_nml_test_format_hh_82_STEPS_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("STEPS");
	enum_anonymous_enum_nml_test_format_hh_82_SUBSTATION_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SUBSTATION");
	enum_anonymous_enum_nml_test_format_hh_82_TREE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TREE");
	enum_anonymous_enum_nml_test_format_hh_82_TREES_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TREES");
	enum_anonymous_enum_nml_test_format_hh_82_UNKNOWN_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UNKNOWN");
	enum_anonymous_enum_nml_test_format_hh_82_UTILITYBOX_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UTILITYBOX");
	enum_anonymous_enum_nml_test_format_hh_82_UTILITYPOLE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UTILITYPOLE");
	function Enum_anonymous_enum_nml_test_format_hh_82_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_anonymous_enum_nml_test_format_hh_82_Symbol_Lookup,"ada_anonymous_enum_nml_test_format_hh_82_nml_test_format_n_ada_symbol_lookup");

	function Enum_anonymous_enum_nml_test_format_hh_82_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 4	=>	return enum_anonymous_enum_nml_test_format_hh_82_BUILDING_Key_Name; -- BUILDING
			when 7	=>	return enum_anonymous_enum_nml_test_format_hh_82_BUILDINGCONNECTOR_Key_Name; -- BUILDINGCONNECTOR
			when 8	=>	return enum_anonymous_enum_nml_test_format_hh_82_CONCRETE_Key_Name; -- CONCRETE
			when 6	=>	return enum_anonymous_enum_nml_test_format_hh_82_DRIVEPAVED_Key_Name; -- DRIVEPAVED
			when 0	=>	return enum_anonymous_enum_nml_test_format_hh_82_INIT_Key_Name; -- INIT
			when 11	=>	return enum_anonymous_enum_nml_test_format_hh_82_LAKE_Key_Name; -- LAKE
			when 18	=>	return enum_anonymous_enum_nml_test_format_hh_82_LAMP_Key_Name; -- LAMP
			when 17	=>	return enum_anonymous_enum_nml_test_format_hh_82_LIGHTPOLE_Key_Name; -- LIGHTPOLE
			when 3	=>	return enum_anonymous_enum_nml_test_format_hh_82_PARKINGPAVED_Key_Name; -- PARKINGPAVED
			when 14	=>	return enum_anonymous_enum_nml_test_format_hh_82_SHRUB_Key_Name; -- SHRUB
			when 1	=>	return enum_anonymous_enum_nml_test_format_hh_82_SIDEWALK_Key_Name; -- SIDEWALK
			when 16	=>	return enum_anonymous_enum_nml_test_format_hh_82_SIGN_Key_Name; -- SIGN
			when 9	=>	return enum_anonymous_enum_nml_test_format_hh_82_STEPS_Key_Name; -- STEPS
			when 10	=>	return enum_anonymous_enum_nml_test_format_hh_82_SUBSTATION_Key_Name; -- SUBSTATION
			when 15	=>	return enum_anonymous_enum_nml_test_format_hh_82_TREE_Key_Name; -- TREE
			when 5	=>	return enum_anonymous_enum_nml_test_format_hh_82_TREES_Key_Name; -- TREES
			when 2	=>	return enum_anonymous_enum_nml_test_format_hh_82_UNKNOWN_Key_Name; -- UNKNOWN
			when 12	=>	return enum_anonymous_enum_nml_test_format_hh_82_UTILITYBOX_Key_Name; -- UTILITYBOX
			when 13	=>	return enum_anonymous_enum_nml_test_format_hh_82_UTILITYPOLE_Key_Name; -- UTILITYPOLE
			when others	=>	return Null_Ptr;
		end case;
	end Enum_anonymous_enum_nml_test_format_hh_82_Symbol_Lookup;

	function Enum_anonymous_enum_nml_test_format_hh_82_To_Int(enum_val: in anonymous_enum_nml_test_format_hh_82) return int is
	begin
		case enum_val is
			when INIT	=>	return 0;
			when DRIVEPAVED	=>	return 6;
			when SIGN	=>	return 16;
			when LAKE	=>	return 11;
			when STEPS	=>	return 9;
			when SUBSTATION	=>	return 10;
			when BUILDINGCONNECTOR	=>	return 7;
			when LIGHTPOLE	=>	return 17;
			when PARKINGPAVED	=>	return 3;
			when CONCRETE	=>	return 8;
			when UTILITYBOX	=>	return 12;
			when SIDEWALK	=>	return 1;
			when BUILDING	=>	return 4;
			when LAMP	=>	return 18;
			when SHRUB	=>	return 14;
			when TREE	=>	return 15;
			when UTILITYPOLE	=>	return 13;
			when TREES	=>	return 5;
			when UNKNOWN	=>	return 2;
			when Bad_anonymous_enum_nml_test_format_hh_82_Value	=>	return -1;
		end case;
	end Enum_anonymous_enum_nml_test_format_hh_82_To_Int;

	function Int_To_Enum_anonymous_enum_nml_test_format_hh_82(enum_int: in int) return anonymous_enum_nml_test_format_hh_82 is
	begin
		case enum_int is
			when 0	=>	return INIT;
			when 6	=>	return DRIVEPAVED;
			when 16	=>	return SIGN;
			when 11	=>	return LAKE;
			when 9	=>	return STEPS;
			when 10	=>	return SUBSTATION;
			when 7	=>	return BUILDINGCONNECTOR;
			when 17	=>	return LIGHTPOLE;
			when 3	=>	return PARKINGPAVED;
			when 8	=>	return CONCRETE;
			when 12	=>	return UTILITYBOX;
			when 1	=>	return SIDEWALK;
			when 4	=>	return BUILDING;
			when 18	=>	return LAMP;
			when 14	=>	return SHRUB;
			when 15	=>	return TREE;
			when 13	=>	return UTILITYPOLE;
			when 5	=>	return TREES;
			when 2	=>	return UNKNOWN;
			when others	=>	return Bad_anonymous_enum_nml_test_format_hh_82_Value;
		end case;
	end Int_To_Enum_anonymous_enum_nml_test_format_hh_82;

	Enum_anonymous_enum_nml_test_format_hh_82_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"anonymous_enum_nml_test_format_hh_82",
			Enum_anonymous_enum_nml_test_format_hh_82_Name_List,
			Enum_anonymous_enum_nml_test_format_hh_82_Int_List,
			18,
			20,
			Enum_anonymous_enum_nml_test_format_hh_82_Symbol_Lookup'Access);


	-- Every NMLmsg type needs an update and an initialize function.

	procedure Initialize(Msg : in out BOP_MSG) is
	begin
		Msg.NmlType := BOP_MSG_TYPE;
		Msg.Size := BOP_MSG'Size/8;
	end Initialize;

	procedure Update_BOP_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in BOP_MSG_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"BOP_MSG","");
		Msg.NmlType := BOP_MSG_TYPE;
		Msg.Size := BOP_MSG'Size/8;
		Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ula", Msg.ula,2);
		Cms.End_Class(Cms_Ptr,"BOP_MSG","");
	end Update_BOP_MSG;

	procedure Update_Internal_BOP_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out BOP_MSG) is
	begin
		Cms.Begin_Class(Cms_Ptr,"BOP_MSG","");
		Msg.NmlType := BOP_MSG_TYPE;
		Msg.Size := BOP_MSG'Size/8;
		Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ula", Msg.ula,2);
		Cms.End_Class(Cms_Ptr,"BOP_MSG","");
	end Update_Internal_BOP_MSG;


	procedure Initialize(Msg : in out MyStat) is
	begin
		Msg.NmlType := MY_STAT_TYPE;
		Msg.Size := MyStat'Size/8;
	end Initialize;

	procedure Update_MyStat(Cms_Ptr : in Cms.Cms_Access; Msg : in MyStat_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"MyStat","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Update_Internal_RCS_STAT_MSG(Cms_Ptr, RCS_STAT_MSG(Msg.all));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Msg.NmlType := MY_STAT_TYPE;
		Msg.Size := MyStat'Size/8;
		Cms.End_Class(Cms_Ptr,"MyStat","");
	end Update_MyStat;

	procedure Update_Internal_MyStat(Cms_Ptr : in Cms.Cms_Access; Msg : in out MyStat) is
	begin
		Cms.Begin_Class(Cms_Ptr,"MyStat","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Update_Internal_RCS_STAT_MSG(Cms_Ptr, RCS_STAT_MSG(Msg));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Msg.NmlType := MY_STAT_TYPE;
		Msg.Size := MyStat'Size/8;
		Cms.End_Class(Cms_Ptr,"MyStat","");
	end Update_Internal_MyStat;


	procedure Initialize(Msg : in out MyStat2) is
	begin
		Msg.NmlType := MY_STAT_V2_TYPE;
		Msg.Size := MyStat2'Size/8;
	end Initialize;

	procedure Update_MyStat2(Cms_Ptr : in Cms.Cms_Access; Msg : in MyStat2_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"MyStat2","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Update_Internal_RCS_STAT_MSG_V2(Cms_Ptr, RCS_STAT_MSG_V2(Msg.all));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Msg.NmlType := MY_STAT_V2_TYPE;
		Msg.Size := MyStat2'Size/8;
		Cms.End_Class(Cms_Ptr,"MyStat2","");
	end Update_MyStat2;

	procedure Update_Internal_MyStat2(Cms_Ptr : in Cms.Cms_Access; Msg : in out MyStat2) is
	begin
		Cms.Begin_Class(Cms_Ptr,"MyStat2","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Update_Internal_RCS_STAT_MSG_V2(Cms_Ptr, RCS_STAT_MSG_V2(Msg));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Msg.NmlType := MY_STAT_V2_TYPE;
		Msg.Size := MyStat2'Size/8;
		Cms.End_Class(Cms_Ptr,"MyStat2","");
	end Update_Internal_MyStat2;


	procedure Initialize(Msg : in out QTEST_MSG) is
	begin
		Msg.NmlType := QTEST_MSG_TYPE;
		Msg.Size := QTEST_MSG'Size/8;
	end Initialize;

	procedure Update_QTEST_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in QTEST_MSG_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"QTEST_MSG","");
		Msg.NmlType := QTEST_MSG_TYPE;
		Msg.Size := QTEST_MSG'Size/8;
		Cms.Update_Int(Cms_Ptr, "priority", Msg.priority);
		Cms.Update_Int(Cms_Ptr, "pchanges_count", Msg.pchanges_count);
		Cms.Update_Int(Cms_Ptr, "count", Msg.count);
		Cms.Update_Int(Cms_Ptr, "pid", Msg.pid);
		Cms.Update_Char_Array(Cms_Ptr, "line", Msg.line,105);
		Cms.Update_Double(Cms_Ptr, "time", Msg.time);
		Cms.End_Class(Cms_Ptr,"QTEST_MSG","");
	end Update_QTEST_MSG;

	procedure Update_Internal_QTEST_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out QTEST_MSG) is
	begin
		Cms.Begin_Class(Cms_Ptr,"QTEST_MSG","");
		Msg.NmlType := QTEST_MSG_TYPE;
		Msg.Size := QTEST_MSG'Size/8;
		Cms.Update_Int(Cms_Ptr, "priority", Msg.priority);
		Cms.Update_Int(Cms_Ptr, "pchanges_count", Msg.pchanges_count);
		Cms.Update_Int(Cms_Ptr, "count", Msg.count);
		Cms.Update_Int(Cms_Ptr, "pid", Msg.pid);
		Cms.Update_Char_Array(Cms_Ptr, "line", Msg.line,105);
		Cms.Update_Double(Cms_Ptr, "time", Msg.time);
		Cms.End_Class(Cms_Ptr,"QTEST_MSG","");
	end Update_Internal_QTEST_MSG;


	procedure Initialize(Msg : in out SIMPLER_MSG) is
	begin
		Msg.NmlType := SIMPLER_MSG_TYPE;
		Msg.Size := SIMPLER_MSG'Size/8;
	end Initialize;

	procedure Update_SIMPLER_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in SIMPLER_MSG_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"SIMPLER_MSG","");
		Msg.NmlType := SIMPLER_MSG_TYPE;
		Msg.Size := SIMPLER_MSG'Size/8;
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char_Array(Cms_Ptr, "cbuf", Msg.cbuf,80);
		Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
		Cms.End_Class(Cms_Ptr,"SIMPLER_MSG","");
	end Update_SIMPLER_MSG;

	procedure Update_Internal_SIMPLER_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out SIMPLER_MSG) is
	begin
		Cms.Begin_Class(Cms_Ptr,"SIMPLER_MSG","");
		Msg.NmlType := SIMPLER_MSG_TYPE;
		Msg.Size := SIMPLER_MSG'Size/8;
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char_Array(Cms_Ptr, "cbuf", Msg.cbuf,80);
		Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
		Cms.End_Class(Cms_Ptr,"SIMPLER_MSG","");
	end Update_Internal_SIMPLER_MSG;


	procedure Initialize(Msg : in out TEST_MESSAGE_BASE) is
	begin
		Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
		Msg.Size := TEST_MESSAGE_BASE'Size/8;
	end Initialize;

	procedure Update_TEST_MESSAGE_BASE(Cms_Ptr : in Cms.Cms_Access; Msg : in TEST_MESSAGE_BASE_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Update_Internal_RCS_STAT_MSG_V2(Cms_Ptr, RCS_STAT_MSG_V2(Msg.all));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
		Msg.Size := TEST_MESSAGE_BASE'Size/8;
		Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
		Cms.End_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
	end Update_TEST_MESSAGE_BASE;

	procedure Update_Internal_TEST_MESSAGE_BASE(Cms_Ptr : in Cms.Cms_Access; Msg : in out TEST_MESSAGE_BASE) is
	begin
		Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Update_Internal_RCS_STAT_MSG_V2(Cms_Ptr, RCS_STAT_MSG_V2(Msg));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG_V2");
		Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
		Msg.Size := TEST_MESSAGE_BASE'Size/8;
		Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
		Cms.End_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
	end Update_Internal_TEST_MESSAGE_BASE;


	procedure Update_c_struct(Cms_Ptr : in Cms.Cms_Access; Msg : in c_struct_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"c_struct","");
		Cms.Update_Char(Cms_Ptr, "csc", Msg.csc);
		Cms.Update_Int(Cms_Ptr, "csi", Msg.csi);
		Cms.End_Class(Cms_Ptr,"c_struct","");
	end Update_c_struct;

	procedure Update_Internal_c_struct(Cms_Ptr : in Cms.Cms_Access; Msg : in out c_struct) is
	begin
		Cms.Begin_Class(Cms_Ptr,"c_struct","");
		Cms.Update_Char(Cms_Ptr, "csc", Msg.csc);
		Cms.Update_Int(Cms_Ptr, "csi", Msg.csi);
		Cms.End_Class(Cms_Ptr,"c_struct","");
	end Update_Internal_c_struct;


	procedure Update_c_struct2(Cms_Ptr : in Cms.Cms_Access; Msg : in c_struct2_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"c_struct2","");
		Cms.Update_Char(Cms_Ptr, "csc2", Msg.csc2);
		Cms.Update_Int(Cms_Ptr, "csi2", Msg.csi2);
		Cms.End_Class(Cms_Ptr,"c_struct2","");
	end Update_c_struct2;

	procedure Update_Internal_c_struct2(Cms_Ptr : in Cms.Cms_Access; Msg : in out c_struct2) is
	begin
		Cms.Begin_Class(Cms_Ptr,"c_struct2","");
		Cms.Update_Char(Cms_Ptr, "csc2", Msg.csc2);
		Cms.Update_Int(Cms_Ptr, "csi2", Msg.csi2);
		Cms.End_Class(Cms_Ptr,"c_struct2","");
	end Update_Internal_c_struct2;


	procedure Update_fwLaserStruct(Cms_Ptr : in Cms.Cms_Access; Msg : in fwLaserStruct_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"fwLaserStruct","");
		Cms.Update_Unsigned_Short_Array(Cms_Ptr, "rangep", Msg.rangep,12);
		Cms.End_Class(Cms_Ptr,"fwLaserStruct","");
	end Update_fwLaserStruct;

	procedure Update_Internal_fwLaserStruct(Cms_Ptr : in Cms.Cms_Access; Msg : in out fwLaserStruct) is
	begin
		Cms.Begin_Class(Cms_Ptr,"fwLaserStruct","");
		Cms.Update_Unsigned_Short_Array(Cms_Ptr, "rangep", Msg.rangep,12);
		Cms.End_Class(Cms_Ptr,"fwLaserStruct","");
	end Update_Internal_fwLaserStruct;


	procedure Update_teststruct(Cms_Ptr : in Cms.Cms_Access; Msg : in teststruct_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"teststruct","");
		Cms.Begin_Class_Var(Cms_Ptr,"cs");
		Update_Internal_c_struct(Cms_Ptr,Msg.cs);
		Cms.End_Class_Var(Cms_Ptr,"cs");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Char_Array(Cms_Ptr, "two_c_array", Msg.two_c_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_Char_Array(Cms_Ptr, "three_c_array", Msg.three_c_array,8);
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,2);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,2);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,2);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,2);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
		Cms.End_Class(Cms_Ptr,"teststruct","");
	end Update_teststruct;

	procedure Update_Internal_teststruct(Cms_Ptr : in Cms.Cms_Access; Msg : in out teststruct) is
	begin
		Cms.Begin_Class(Cms_Ptr,"teststruct","");
		Cms.Begin_Class_Var(Cms_Ptr,"cs");
		Update_Internal_c_struct(Cms_Ptr,Msg.cs);
		Cms.End_Class_Var(Cms_Ptr,"cs");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Char_Array(Cms_Ptr, "two_c_array", Msg.two_c_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_Char_Array(Cms_Ptr, "three_c_array", Msg.three_c_array,8);
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,2);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,2);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,2);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,2);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
		Cms.End_Class(Cms_Ptr,"teststruct","");
	end Update_Internal_teststruct;


	procedure Update_teststruct_td2(Cms_Ptr : in Cms.Cms_Access; Msg : in teststruct_td2_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"teststruct_td2","");
		Cms.Begin_Class_Var(Cms_Ptr,"cs2");
		Update_Internal_c_struct2(Cms_Ptr,Msg.cs2);
		Cms.End_Class_Var(Cms_Ptr,"cs2");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,2);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,2);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,2);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,2);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,2);
		Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
		Cms.End_Class(Cms_Ptr,"teststruct_td2","");
	end Update_teststruct_td2;

	procedure Update_Internal_teststruct_td2(Cms_Ptr : in Cms.Cms_Access; Msg : in out teststruct_td2) is
	begin
		Cms.Begin_Class(Cms_Ptr,"teststruct_td2","");
		Cms.Begin_Class_Var(Cms_Ptr,"cs2");
		Update_Internal_c_struct2(Cms_Ptr,Msg.cs2);
		Cms.End_Class_Var(Cms_Ptr,"cs2");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,2);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,2);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,2);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,2);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,2);
		Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
		Cms.End_Class(Cms_Ptr,"teststruct_td2","");
	end Update_Internal_teststruct_td2;


	procedure Initialize(Msg : in out TEST_MESSAGE) is
	begin
		Msg.NmlType := TEST_MESSAGE_TYPE;
		Msg.Size := TEST_MESSAGE'Size/8;
	end Initialize;

	procedure Update_TEST_MESSAGE(Cms_Ptr : in Cms.Cms_Access; Msg : in TEST_MESSAGE_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE","");
		Cms.Begin_Base_Class(Cms_Ptr,"TEST_MESSAGE_BASE");
		Update_Internal_TEST_MESSAGE_BASE(Cms_Ptr, TEST_MESSAGE_BASE(Msg.all));
		Cms.End_Base_Class(Cms_Ptr,"TEST_MESSAGE_BASE");
		Msg.NmlType := TEST_MESSAGE_TYPE;
		Msg.Size := TEST_MESSAGE'Size/8;
		Cms.Update_Char(Cms_Ptr, "byte_to_messup_msg", Msg.byte_to_messup_msg);
		Cms.Update_Long(Cms_Ptr, "first_count", Msg.first_count);
		Cms.Begin_Class_Var(Cms_Ptr,"sfoh");
		Update_Internal_struct_from_other_header(Cms_Ptr,Msg.sfoh);
		Cms.End_Class_Var(Cms_Ptr,"sfoh");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Long(Cms_Ptr, "l", Msg.l);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ul", Msg.ul);
		Cms.Begin_Class_Var(Cms_Ptr,"fw");
		Update_Internal_fwLaserStruct(Cms_Ptr,Msg.fw);
		Cms.End_Class_Var(Cms_Ptr,"fw");
		Msg.etd := Int_To_Enum_Enumtest_Typedef(
			Cms.Update_Enumeration(Cms_Ptr, "etd", Enum_Enumtest_Typedef_To_Int(Msg.etd), Enum_Enumtest_Typedef_Info));
		Msg.etd2 := Int_To_Enum_Enumtest_Typedef2(
			Cms.Update_Enumeration(Cms_Ptr, "etd2", Enum_Enumtest_Typedef2_To_Int(Msg.etd2), Enum_Enumtest_Typedef2_Info));
		Cms.Update_Char_Array(Cms_Ptr, "big_array", Msg.big_array,1000);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,2);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
		Cms.Begin_Class_Var(Cms_Ptr,"s");
		Update_Internal_teststruct(Cms_Ptr,Msg.s);
		Cms.End_Class_Var(Cms_Ptr,"s");
		Cms.Begin_Class_Var(Cms_Ptr,"s_td2");
		Update_Internal_teststruct_td2(Cms_Ptr,Msg.s_td2);
		Cms.End_Class_Var(Cms_Ptr,"s_td2");
		for sa_Index in Msg.sa'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.sa(sa_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
		end loop;
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"sda_length", Msg.sda_Length);
		Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
		for sda_Index in Msg.sda'Range
		loop
			if int(sda_Index - Msg.sda'First) >= Msg.sda_Length then
				exit;
			end if;
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.sda(sda_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
		end loop;
		Cms.End_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
		Msg.enumtestvar := Int_To_Enum_Enumtest(
			Cms.Update_Enumeration(Cms_Ptr, "enumtestvar", Enum_Enumtest_To_Int(Msg.enumtestvar), Enum_Enumtest_Info));
		Cms.Begin_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
		for enum_array_Index in Msg.enum_array'Range
		loop
			Msg.enum_array(enum_array_Index) := Int_To_Enum_Enumtest(
				Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enum_array", Enum_Enumtest_To_Int(Msg.enum_array(enum_array_Index)),int(enum_array_Index-Msg.enum_array'First)));
		end loop;
		Cms.End_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
		Cms.Update_Dla_Length(Cms_Ptr,"enumtest_dla_length", Msg.enumtest_dla_Length);
		Cms.Begin_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
		for enumtest_dla_Index in Msg.enumtest_dla'Range
		loop
			if int(enumtest_dla_Index-Msg.enumtest_dla'First) >= Msg.enumtest_dla_Length then
				exit;
			end if;
			Msg.enumtest_dla(enumtest_dla_Index) := Int_To_Enum_Enumtest(
				Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enumtest_dla", Enum_Enumtest_To_Int(Msg.enumtest_dla(enumtest_dla_Index)),int(enumtest_dla_Index-Msg.enumtest_dla'First)));
		end loop;
		Cms.End_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
		Cms.Begin_Class_Var(Cms_Ptr,"cart");
		Update_Internal_PM_CARTESIAN(Cms_Ptr,Msg.cart);
		Cms.End_Class_Var(Cms_Ptr,"cart");
		for cart_array_Index in Msg.cart_array'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"cart_array",int(cart_array_Index - Msg.cart_array'First));
			Update_Internal_PM_CARTESIAN(Cms_Ptr, Msg.cart_array(cart_array_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"cart_array",int(cart_array_Index - Msg.cart_array'First));
		end loop;
		Cms.Update_Dla_Length(Cms_Ptr,"cart_dla_length", Msg.cart_dla_Length);
		Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"cart_dla",Msg.cart_dla_Length,Msg.cart_dla'Length);
		for cart_dla_Index in Msg.cart_dla'Range
		loop
			if int(cart_dla_Index - Msg.cart_dla'First) >= Msg.cart_dla_Length then
				exit;
			end if;
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"cart_dla",int(cart_dla_Index - Msg.cart_dla'First));
			Update_Internal_PM_CARTESIAN(Cms_Ptr, Msg.cart_dla(cart_dla_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"cart_dla",int(cart_dla_Index - Msg.cart_dla'First));
		end loop;
		Cms.End_Struct_Dynamic_Array(Cms_Ptr,"cart_dla",Msg.cart_dla_Length,Msg.cart_dla'Length);
		Cms.Update_Boolean(Cms_Ptr, "do_int_size_test", Msg.do_int_size_test);
		Cms.Update_Short(Cms_Ptr, "smin", Msg.smin);
		Cms.Update_Short(Cms_Ptr, "smax", Msg.smax);
		Cms.Update_Int(Cms_Ptr, "i_smin", Msg.i_smin);
		Cms.Update_Int(Cms_Ptr, "i_smax", Msg.i_smax);
		Cms.Update_Int(Cms_Ptr, "imin", Msg.imin);
		Cms.Update_Int(Cms_Ptr, "imax", Msg.imax);
		Cms.Update_Long(Cms_Ptr, "l_imin", Msg.l_imin);
		Cms.Update_Long(Cms_Ptr, "l_imax", Msg.l_imax);
		Cms.Update_Long(Cms_Ptr, "lmin", Msg.lmin);
		Cms.Update_Long(Cms_Ptr, "lmax", Msg.lmax);
		Cms.Update_Unsigned_Short(Cms_Ptr, "usmax", Msg.usmax);
		Cms.Update_Unsigned(Cms_Ptr, "ui_usmax", Msg.ui_usmax);
		Cms.Update_Unsigned(Cms_Ptr, "uimax", Msg.uimax);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ul_uimax", Msg.ul_uimax);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ulmax", Msg.ulmax);
		Cms.Update_Double(Cms_Ptr, "d_ulmax", Msg.d_ulmax);
		Cms.Update_Double(Cms_Ptr, "d_lmin", Msg.d_lmin);
		Cms.Update_Double(Cms_Ptr, "d_lmax", Msg.d_lmax);
		Cms.Update_Short_Array(Cms_Ptr, "s_array", Msg.s_array,3);
		Cms.Update_Int_Array(Cms_Ptr, "i_array", Msg.i_array,3);
		Cms.Update_Long_Array(Cms_Ptr, "l_array", Msg.l_array,3);
		Cms.Update_Unsigned_Short_Array(Cms_Ptr, "us_array", Msg.us_array,2);
		Cms.Update_Unsigned_Array(Cms_Ptr, "ui_array", Msg.ui_array,2);
		Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ul_array", Msg.ul_array,2);
		Cms.Update_Boolean(Cms_Ptr, "false_bool", Msg.false_bool);
		Cms.Update_Boolean(Cms_Ptr, "true_bool", Msg.true_bool);
		Cms.Update_Short(Cms_Ptr, "sminusone", Msg.sminusone);
		Cms.Update_Int(Cms_Ptr, "iminusone", Msg.iminusone);
		Cms.Update_Long(Cms_Ptr, "lminusone", Msg.lminusone);
		Cms.Update_C_Float(Cms_Ptr, "fminusone", Msg.fminusone);
		Cms.Update_Double(Cms_Ptr, "dminusone", Msg.dminusone);
		Cms.Update_Long(Cms_Ptr, "last_count", Msg.last_count);
		for teststruct_2d_array_Index in Msg.teststruct_2d_array'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"teststruct_2d_array",int(teststruct_2d_array_Index - Msg.teststruct_2d_array'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.teststruct_2d_array(teststruct_2d_array_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"teststruct_2d_array",int(teststruct_2d_array_Index - Msg.teststruct_2d_array'First));
		end loop;
		Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
		Cms.End_Class(Cms_Ptr,"TEST_MESSAGE","");
	end Update_TEST_MESSAGE;

	procedure Update_Internal_TEST_MESSAGE(Cms_Ptr : in Cms.Cms_Access; Msg : in out TEST_MESSAGE) is
	begin
		Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE","");
		Cms.Begin_Base_Class(Cms_Ptr,"TEST_MESSAGE_BASE");
		Update_Internal_TEST_MESSAGE_BASE(Cms_Ptr, TEST_MESSAGE_BASE(Msg));
		Cms.End_Base_Class(Cms_Ptr,"TEST_MESSAGE_BASE");
		Msg.NmlType := TEST_MESSAGE_TYPE;
		Msg.Size := TEST_MESSAGE'Size/8;
		Cms.Update_Char(Cms_Ptr, "byte_to_messup_msg", Msg.byte_to_messup_msg);
		Cms.Update_Long(Cms_Ptr, "first_count", Msg.first_count);
		Cms.Begin_Class_Var(Cms_Ptr,"sfoh");
		Update_Internal_struct_from_other_header(Cms_Ptr,Msg.sfoh);
		Cms.End_Class_Var(Cms_Ptr,"sfoh");
		Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
		Cms.Update_Char(Cms_Ptr, "c", Msg.c);
		Cms.Update_Double(Cms_Ptr, "d", Msg.d);
		Cms.Update_Int(Cms_Ptr, "i", Msg.i);
		Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
		Cms.Update_Long(Cms_Ptr, "l", Msg.l);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ul", Msg.ul);
		Cms.Begin_Class_Var(Cms_Ptr,"fw");
		Update_Internal_fwLaserStruct(Cms_Ptr,Msg.fw);
		Cms.End_Class_Var(Cms_Ptr,"fw");
		Msg.etd := Int_To_Enum_Enumtest_Typedef(
			Cms.Update_Enumeration(Cms_Ptr, "etd", Enum_Enumtest_Typedef_To_Int(Msg.etd), Enum_Enumtest_Typedef_Info));
		Msg.etd2 := Int_To_Enum_Enumtest_Typedef2(
			Cms.Update_Enumeration(Cms_Ptr, "etd2", Enum_Enumtest_Typedef2_To_Int(Msg.etd2), Enum_Enumtest_Typedef2_Info));
		Cms.Update_Char_Array(Cms_Ptr, "big_array", Msg.big_array,1000);
		Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,2);
		Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,2);
		Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,2);
		Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,2);
		Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,2);
		Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,4);
		Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,8);
		Cms.Update_C_Float(Cms_Ptr, "f_pi", Msg.f_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
		Cms.Update_Double(Cms_Ptr, "seventysevenpointseven", Msg.seventysevenpointseven);
		Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
		Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
		Cms.Update_Double(Cms_Ptr, "eightyeightpointeight", Msg.eightyeightpointeight);
		Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
		Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
		Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
		Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
		Cms.Begin_Class_Var(Cms_Ptr,"s");
		Update_Internal_teststruct(Cms_Ptr,Msg.s);
		Cms.End_Class_Var(Cms_Ptr,"s");
		Cms.Begin_Class_Var(Cms_Ptr,"s_td2");
		Update_Internal_teststruct_td2(Cms_Ptr,Msg.s_td2);
		Cms.End_Class_Var(Cms_Ptr,"s_td2");
		for sa_Index in Msg.sa'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.sa(sa_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
		end loop;
		Cms.Update_Double(Cms_Ptr, "d_pi", Msg.d_pi);
		Cms.Update_Dla_Length(Cms_Ptr,"sda_length", Msg.sda_Length);
		Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
		for sda_Index in Msg.sda'Range
		loop
			if int(sda_Index - Msg.sda'First) >= Msg.sda_Length then
				exit;
			end if;
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.sda(sda_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
		end loop;
		Cms.End_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
		Msg.enumtestvar := Int_To_Enum_Enumtest(
			Cms.Update_Enumeration(Cms_Ptr, "enumtestvar", Enum_Enumtest_To_Int(Msg.enumtestvar), Enum_Enumtest_Info));
		Cms.Begin_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
		for enum_array_Index in Msg.enum_array'Range
		loop
			Msg.enum_array(enum_array_Index) := Int_To_Enum_Enumtest(
				Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enum_array", Enum_Enumtest_To_Int(Msg.enum_array(enum_array_Index)),int(enum_array_Index-Msg.enum_array'First)));
		end loop;
		Cms.End_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
		Cms.Update_Dla_Length(Cms_Ptr,"enumtest_dla_length", Msg.enumtest_dla_Length);
		Cms.Begin_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
		for enumtest_dla_Index in Msg.enumtest_dla'Range
		loop
			if int(enumtest_dla_Index-Msg.enumtest_dla'First) >= Msg.enumtest_dla_Length then
				exit;
			end if;
			Msg.enumtest_dla(enumtest_dla_Index) := Int_To_Enum_Enumtest(
				Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enumtest_dla", Enum_Enumtest_To_Int(Msg.enumtest_dla(enumtest_dla_Index)),int(enumtest_dla_Index-Msg.enumtest_dla'First)));
		end loop;
		Cms.End_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
		Cms.Begin_Class_Var(Cms_Ptr,"cart");
		Update_Internal_PM_CARTESIAN(Cms_Ptr,Msg.cart);
		Cms.End_Class_Var(Cms_Ptr,"cart");
		for cart_array_Index in Msg.cart_array'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"cart_array",int(cart_array_Index - Msg.cart_array'First));
			Update_Internal_PM_CARTESIAN(Cms_Ptr, Msg.cart_array(cart_array_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"cart_array",int(cart_array_Index - Msg.cart_array'First));
		end loop;
		Cms.Update_Dla_Length(Cms_Ptr,"cart_dla_length", Msg.cart_dla_Length);
		Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"cart_dla",Msg.cart_dla_Length,Msg.cart_dla'Length);
		for cart_dla_Index in Msg.cart_dla'Range
		loop
			if int(cart_dla_Index - Msg.cart_dla'First) >= Msg.cart_dla_Length then
				exit;
			end if;
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"cart_dla",int(cart_dla_Index - Msg.cart_dla'First));
			Update_Internal_PM_CARTESIAN(Cms_Ptr, Msg.cart_dla(cart_dla_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"cart_dla",int(cart_dla_Index - Msg.cart_dla'First));
		end loop;
		Cms.End_Struct_Dynamic_Array(Cms_Ptr,"cart_dla",Msg.cart_dla_Length,Msg.cart_dla'Length);
		Cms.Update_Boolean(Cms_Ptr, "do_int_size_test", Msg.do_int_size_test);
		Cms.Update_Short(Cms_Ptr, "smin", Msg.smin);
		Cms.Update_Short(Cms_Ptr, "smax", Msg.smax);
		Cms.Update_Int(Cms_Ptr, "i_smin", Msg.i_smin);
		Cms.Update_Int(Cms_Ptr, "i_smax", Msg.i_smax);
		Cms.Update_Int(Cms_Ptr, "imin", Msg.imin);
		Cms.Update_Int(Cms_Ptr, "imax", Msg.imax);
		Cms.Update_Long(Cms_Ptr, "l_imin", Msg.l_imin);
		Cms.Update_Long(Cms_Ptr, "l_imax", Msg.l_imax);
		Cms.Update_Long(Cms_Ptr, "lmin", Msg.lmin);
		Cms.Update_Long(Cms_Ptr, "lmax", Msg.lmax);
		Cms.Update_Unsigned_Short(Cms_Ptr, "usmax", Msg.usmax);
		Cms.Update_Unsigned(Cms_Ptr, "ui_usmax", Msg.ui_usmax);
		Cms.Update_Unsigned(Cms_Ptr, "uimax", Msg.uimax);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ul_uimax", Msg.ul_uimax);
		Cms.Update_Unsigned_Long(Cms_Ptr, "ulmax", Msg.ulmax);
		Cms.Update_Double(Cms_Ptr, "d_ulmax", Msg.d_ulmax);
		Cms.Update_Double(Cms_Ptr, "d_lmin", Msg.d_lmin);
		Cms.Update_Double(Cms_Ptr, "d_lmax", Msg.d_lmax);
		Cms.Update_Short_Array(Cms_Ptr, "s_array", Msg.s_array,3);
		Cms.Update_Int_Array(Cms_Ptr, "i_array", Msg.i_array,3);
		Cms.Update_Long_Array(Cms_Ptr, "l_array", Msg.l_array,3);
		Cms.Update_Unsigned_Short_Array(Cms_Ptr, "us_array", Msg.us_array,2);
		Cms.Update_Unsigned_Array(Cms_Ptr, "ui_array", Msg.ui_array,2);
		Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ul_array", Msg.ul_array,2);
		Cms.Update_Boolean(Cms_Ptr, "false_bool", Msg.false_bool);
		Cms.Update_Boolean(Cms_Ptr, "true_bool", Msg.true_bool);
		Cms.Update_Short(Cms_Ptr, "sminusone", Msg.sminusone);
		Cms.Update_Int(Cms_Ptr, "iminusone", Msg.iminusone);
		Cms.Update_Long(Cms_Ptr, "lminusone", Msg.lminusone);
		Cms.Update_C_Float(Cms_Ptr, "fminusone", Msg.fminusone);
		Cms.Update_Double(Cms_Ptr, "dminusone", Msg.dminusone);
		Cms.Update_Long(Cms_Ptr, "last_count", Msg.last_count);
		for teststruct_2d_array_Index in Msg.teststruct_2d_array'Range
		loop
			Cms.Begin_Struct_Array_Elem(Cms_Ptr,"teststruct_2d_array",int(teststruct_2d_array_Index - Msg.teststruct_2d_array'First));
			Update_Internal_Teststruct(Cms_Ptr, Msg.teststruct_2d_array(teststruct_2d_array_Index));
			Cms.End_Struct_Array_Elem(Cms_Ptr,"teststruct_2d_array",int(teststruct_2d_array_Index - Msg.teststruct_2d_array'First));
		end loop;
		Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
		Cms.End_Class(Cms_Ptr,"TEST_MESSAGE","");
	end Update_Internal_TEST_MESSAGE;



	NameList : constant Char_Array(1..144) := (
		'B','O','P','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'M','y','S','t','a','t',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'M','y','S','t','a','t','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'Q','T','E','S','T','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','I','M','P','L','E','R','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,
		'T','E','S','T','_','M','E','S','S','A','G','E',nul,nul,nul,nul,nul,nul,
		'T','E','S','T','_','M','E','S','S','A','G','E','_','B','A','S','E',nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);

	IdList : constant Cms.Long_Array(1..8) := (
		BOP_MSG_TYPE, -- 104, 0
		MY_STAT_TYPE, -- 1001, 1
		MY_STAT_V2_TYPE, -- 2002, 2
		QTEST_MSG_TYPE, -- 103, 3
		SIMPLER_MSG_TYPE, -- 102, 4
		TEST_MESSAGE_TYPE, -- 101, 5
		TEST_MESSAGE_BASE_TYPE, -- 100, 6
		-1);

	SizeList : constant Cms.Size_T_Array(1..8) := (
		BOP_MSG'Size/8,
		MyStat'Size/8,
		MyStat2'Size/8,
		QTEST_MSG'Size/8,
		SIMPLER_MSG'Size/8,
		TEST_MESSAGE'Size/8,
		TEST_MESSAGE_BASE'Size/8,
		0);
	Symbol_Lookup_BOP_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("BOP_MSG");
	Symbol_Lookup_MyStat_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("MyStat");
	Symbol_Lookup_MyStat2_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("MyStat2");
	Symbol_Lookup_QTEST_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("QTEST_MSG");
	Symbol_Lookup_SIMPLER_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SIMPLER_MSG");
	Symbol_Lookup_TEST_MESSAGE_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TEST_MESSAGE");
	Symbol_Lookup_TEST_MESSAGE_BASE_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TEST_MESSAGE_BASE");

	function Symbol_Lookup(Nml_Type : in long) return Interfaces.C.Strings.Chars_Ptr;
	pragma Export(C,Symbol_Lookup,"ada_nml_test_format_n_ada_symbol_lookup");

	function Symbol_Lookup(Nml_Type : in long) return Interfaces.C.Strings.Chars_Ptr is
	begin
		case Nml_Type is
			 when BOP_MSG_TYPE	=>	return Symbol_Lookup_BOP_MSG_Name;
			 when MY_STAT_TYPE	=>	return Symbol_Lookup_MyStat_Name;
			 when MY_STAT_V2_TYPE	=>	return Symbol_Lookup_MyStat2_Name;
			 when QTEST_MSG_TYPE	=>	return Symbol_Lookup_QTEST_MSG_Name;
			 when SIMPLER_MSG_TYPE	=>	return Symbol_Lookup_SIMPLER_MSG_Name;
			 when TEST_MESSAGE_TYPE	=>	return Symbol_Lookup_TEST_MESSAGE_Name;
			 when TEST_MESSAGE_BASE_TYPE	=>	return Symbol_Lookup_TEST_MESSAGE_BASE_Name;
			 when others	=>	return Null_Ptr;
		end case;
	end Symbol_Lookup;

	function Format(Nml_Type : in long;
			Msg : in NmlMsg_Access;
			Cms_Ptr : in Cms.Cms_Access)
				return int is
		Checked_Nml_Type : long;

	begin
		Checked_Nml_Type := Cms.Check_Type_Info(Cms_Ptr,Nml_Type,
			NmlMsg_Access_To_Limited_Controlled_Access(Msg),
			"nml_test_format_n_ada",
			Symbol_Lookup'Access,
			NameList,IdList,SizeList,8,18);

		if Msg = Null then
			return 0;
		end if;

		case Checked_Nml_Type is
			when BOP_MSG_TYPE	=>	Update_BOP_MSG(Cms_Ptr, NmlMsg_to_BOP_MSG(Msg));
			when MY_STAT_TYPE	=>	Update_MyStat(Cms_Ptr, NmlMsg_to_MyStat(Msg));
			when MY_STAT_V2_TYPE	=>	Update_MyStat2(Cms_Ptr, NmlMsg_to_MyStat2(Msg));
			when QTEST_MSG_TYPE	=>	Update_QTEST_MSG(Cms_Ptr, NmlMsg_to_QTEST_MSG(Msg));
			when SIMPLER_MSG_TYPE	=>	Update_SIMPLER_MSG(Cms_Ptr, NmlMsg_to_SIMPLER_MSG(Msg));
			when TEST_MESSAGE_BASE_TYPE	=>	Update_TEST_MESSAGE_BASE(Cms_Ptr, NmlMsg_to_TEST_MESSAGE_BASE(Msg));
			when TEST_MESSAGE_TYPE	=>	Update_TEST_MESSAGE(Cms_Ptr, NmlMsg_to_TEST_MESSAGE(Msg));
			when others	=>	return 0;
		end case;
		return 1;
	end Format;

end nml_test_format_n_ada;

-- End of Ada Body file  nml_test_format_n_ada.adb

