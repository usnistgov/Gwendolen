/*
*	New Java File starts here.
*	This file should be named otherheader_MsgDict.java
*	Automatically generated by NML CodeGen Java Applet.
*	with command line arguments :  generate_for_all_langs=true HHFile=otherheader.hh
*
*	.gen script :
*		0:load otherheader.hh
*		1:clear
*		2:select_from_file otherheader.hh
*		3:generate C protos>otherheader_c_n.h
*		4:generate C format>otherheader_c_n.c
*		5:generate C update>otherheader_c_n.c
*		6:generate C++ protos>otherheader_n_codegen_protos.hh
*		7:generate C++ format>otherheader_n.cc
*		8:generate C++ update>otherheader_n.cc
*		9:generate C++ constructor>otherheader_n.cc
*		10:generate Java dict>otherheader_MsgDict.java
*		11:generate Java classes >*
*		12:generate Ada spec>otherheader_n_ada.ads
*		13:generate Ada body>otherheader_n_ada.adb
*		14:exit
*
*/

// Import NML classes and interfaces
import rcs.nml.*;

import java.util.Hashtable;
/*
*	Class definition for otherheader_MsgDict
*	Automatically generated by NML CodeGen Java Applet.
*/
public class otherheader_MsgDict implements NMLMessageDictionary
{

	// Define an object of every message class.

	// ID Type Constants

	// Sizes useful for C++ compat and preallocating byte storage. 
	//(not used for normal NML reads/writes).
	public long getEstimatedSize(final int _type)
	{
		switch(_type)
		{
		default:
			break;
		}
		return 1; /* maximum */
	}

	public long getMaxEstimatedSize() {
		return 1;
	}



	//Define an NML_ENUM_INFO object for the type ID's
	NML_ENUM_INFO nml_enum_info_for_type_names =null;


	//Create a constructor to setup the NML_ENUM_INFO object.
	public otherheader_MsgDict()
	{
		nml_enum_info_for_type_names= new NML_ENUM_INFO();
		nml_enum_info_for_type_names.name="otherheader_MsgDict";
		Hashtable h1 = new Hashtable();
		Hashtable h2 = new Hashtable();
		Integer I = null;
		String  S = null;
		nml_enum_info_for_type_names.int_to_string_hash=h1;
		nml_enum_info_for_type_names.string_to_int_hash=h2;
	}



	// Miscellaneous Pre-Defined Values

	// Enumerated Type Constants


	// NML Format Function
	public int formatMsg(NMLFormatConverter nml_fc)
	{
		int return_val=0;
		nml_fc.check_type_info(nml_enum_info_for_type_names);

		switch(nml_fc.msg_type)
		{

		// Type struct_from_other_header has Id less than 1 :  -2

		default:
			return_val=-1;
			break;
		}
		return(return_val);
	}


	// NML Symbol Lookup Function
	public static String SymbolLookup(int type)
	{
		switch(type)
		{

		// Type struct_from_other_header has Id less than 1 :  -2

		default:
			break;
		}
		return("!!UNDEFINED_SYMBOL!!");
	}

}
