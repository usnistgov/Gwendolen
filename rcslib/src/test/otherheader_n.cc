/*
*	New C++ File starts here.
*	This file should be named otherheader.cc
*	Automatically generated by NML CodeGen Java Applet.
*	with command line arguments :  generate_for_all_langs=true HHFile=otherheader.hh
*
*	.gen script :
*		0:load otherheader.hh
*		1:clear
*		2:select_from_file otherheader.hh
*		3:generate C protos>otherheader_c_n.h
*		4:generate C format>otherheader_c_n.c
*		5:generate C update>otherheader_c_n.c
*		6:generate C++ protos>otherheader_n_codegen_protos.hh
*		7:generate C++ format>otherheader_n.cc
*		8:generate C++ update>otherheader_n.cc
*		9:generate C++ constructor>otherheader_n.cc
*		10:generate Java dict>otherheader_MsgDict.java
*		11:generate Java classes >*
*		12:generate Ada spec>otherheader_n_ada.ads
*		13:generate Ada body>otherheader_n_ada.adb
*		14:exit
*
*/

// Include all NML, CMS, and RCS classes and functions
#include "rcs.hh"

// Include command and status message definitions
#include "otherheader.hh"

// Include externally supplied prototypes
#include "otherheader_n_codegen_protos.hh"



#ifndef MAX_STRUCT_FROM_OTHER_HEADER_NAME_LENGTH
#define MAX_STRUCT_FROM_OTHER_HEADER_NAME_LENGTH 1
#endif
#ifndef STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH
#define STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH 1
#endif


/* This list must be in alphabetical order and the three lists must correspond. */
const char struct_from_other_header_name_list[STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH][MAX_STRUCT_FROM_OTHER_HEADER_NAME_LENGTH]= {
	""};
const NMLTYPE struct_from_other_header_id_list[STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH]= {
	-1};
const size_t struct_from_other_header_size_list[STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH]= {
	0};
const char *struct_from_other_header_symbol_lookup(long type);


// Enumerated Type Constants

/*
Estimated_size	struct_from_other_header	1
Estimated_size	MAXIMUM	1
*/
/*
*	NML/CMS Format function : struct_from_other_header_format
*/
int struct_from_other_header_format(NMLTYPE type, void *buffer, CMS *cms)
{

	type = cms->check_type_info(type,buffer,"struct_from_other_header",
		(cms_symbol_lookup_function_t) struct_from_other_header_symbol_lookup,
		(const char **)struct_from_other_header_name_list,
		struct_from_other_header_id_list,struct_from_other_header_size_list,
		STRUCT_FROM_OTHER_HEADER_NAME_LIST_LENGTH,
		MAX_STRUCT_FROM_OTHER_HEADER_NAME_LENGTH);

	return 1;
}


// NML Symbol Lookup Function
const char *struct_from_other_header_symbol_lookup(long)
{
	return(NULL);
}

/*
*	NML/CMS Update function for struct_from_other_header
*	from otherheader.hh:0
*/
void nmlupdate(CMS *cms,struct_from_other_header *x)
{

	cms->beginClass("struct_from_other_header",0);
	cms->update_with_name("x",x->x);

	cms->endClass("struct_from_other_header",0);

}

/*
*	Initializer for struct_from_other_header
*/
void initialize_struct_from_other_header(struct_from_other_header* x)
{
	x->x = (char) 0;

}

