/*
*	New Java File starts here.
*	This file should be named SIMPLER_MSG.java
*	Automatically generated by NML CodeGen Java Applet.
*	from nml_test_format.hh:301
*	with command line arguments :  generate_for_all_langs=true HHFile=nml_test_format.hh
*
*	.gen script :
*		0:load nml_test_format.hh
*		1:clear
*		2:select_from_file nml_test_format.hh
*		3:generate C protos>nml_test_format_c_n.h
*		4:generate C format>nml_test_format_c_n.c
*		5:generate C update>nml_test_format_c_n.c
*		6:generate C++ protos>nml_test_format_n_codegen_protos.hh
*		7:generate C++ format>nml_test_format_n.cc
*		8:generate C++ update>nml_test_format_n.cc
*		9:generate C++ constructor>nml_test_format_n.cc
*		10:generate Java dict>nml_test_format_MsgDict.java
*		11:generate Java classes >*
*		12:generate Ada spec>nml_test_format_n_ada.ads
*		13:generate Ada body>nml_test_format_n_ada.adb
*		14:exit
*
*/

// Import all NML and posemath interfaces
import rcs.nml.*;
import rcs.posemath.*;

/*
*	Class definition for SIMPLER_MSG
*	Automatically generated by NML CodeGen Java Applet.
*/
public class SIMPLER_MSG extends NMLmsg implements Cloneable
{
	public int i = 0;
	public byte cbuf[] = new byte[80];
	public long lastvar = 0;


	// Constructor 
	public SIMPLER_MSG()
	{
		super(102);
		for(int i_cbuf = 0; i_cbuf < 80; i_cbuf++ )
		{
			cbuf[i_cbuf]  = 0;
		}

	}



	// Constructor that should be used by any classes that extend this class. 
	protected SIMPLER_MSG(int _type)
	{
		super(_type);
		for(int i_cbuf = 0; i_cbuf < 80; i_cbuf++ )
		{
			cbuf[i_cbuf]  = 0;
		}

	}


	public void update(NMLFormatConverter nml_fc)
	{

		nml_fc.beginClass("SIMPLER_MSG","NMLmsg");

		nml_fc.beginBaseClass("NMLmsg");

		super.update(nml_fc);

		nml_fc.endBaseClass("NMLmsg");
		i = nml_fc.update_with_name("i",i);
		nml_fc.update_with_name("cbuf",cbuf,80);
		lastvar = nml_fc.update_with_name("lastvar",lastvar);

		nml_fc.endClass("SIMPLER_MSG","NMLmsg");

	}


	public SIMPLER_MSG clone() throws CloneNotSupportedException
	{
		SIMPLER_MSG cloned_object = (SIMPLER_MSG) super.clone();
		if(this.cbuf != null) {
			cloned_object.cbuf = (byte []) this.cbuf.clone();
		}
		return cloned_object;

	}


	/* Getters and Setters */
	public int geti() {
		return (i);
	}
	public void seti(int _i)  {
		this.i=_i;
	}

	public byte [] getcbuf() {
		return (cbuf);
	}
	public void setcbuf(byte [] _cbuf)  {
		this.cbuf=_cbuf;
	}

	public long getlastvar() {
		return (lastvar);
	}
	public void setlastvar(long _lastvar)  {
		this.lastvar=_lastvar;
	}


}

