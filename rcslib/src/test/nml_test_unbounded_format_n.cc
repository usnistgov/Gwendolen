/*
*	New C++ File starts here.
*	This file should be named nml_test_unbounded_format.cc
*	Automatically generated by NML CodeGen Java Applet.
*	with command line arguments :  generate_for_all_langs=true HHFile=nml_test_unbounded_format.hh
*	RCS_VERSION=@(#) RCS_LIBRARY_VERSION: 2009.01.21_1322:1328 Compiled on Thu Jan 22 08:08:48 EST 2009 for the java platform.
*	$Id: CodeGenCommon.java 1325 2009-01-21 17:59:02Z shackle $
*
*	.gen script :
*		0:load nml_test_unbounded_format.hh
*		1:clear
*		2:select_from_file nml_test_unbounded_format.hh
*		3:generate C protos>nml_test_unbounded_format_c_n.h
*		4:generate C format>nml_test_unbounded_format_c_n.c
*		5:generate C update>nml_test_unbounded_format_c_n.c
*		6:generate C++ protos>nml_test_unbounded_format_n_codegen_protos.hh
*		7:generate C++ format>nml_test_unbounded_format_n.cc
*
*/

// Include all NML, CMS, and RCS classes and functions
#include "rcs.hh"

// Include command and status message definitions
#include "nml_test_unbounded_format.hh"

// Include externally supplied prototypes
#include "nml_test_unbounded_format_n_codegen_protos.hh"



#ifndef MAX_NML_TEST_UNBOUNDED_NAME_LENGTH
#define MAX_NML_TEST_UNBOUNDED_NAME_LENGTH 23
#endif
#ifndef NML_TEST_UNBOUNDED_NAME_LIST_LENGTH
#define NML_TEST_UNBOUNDED_NAME_LIST_LENGTH 2
#endif


/* This list must be in alphabetical order and the three lists must correspond. */
const char nml_test_unbounded_name_list[NML_TEST_UNBOUNDED_NAME_LIST_LENGTH][MAX_NML_TEST_UNBOUNDED_NAME_LENGTH]= {
	"NML_TEST_UNBOUNDED_MSG", /* 0,2021 */
	""};
const NMLTYPE nml_test_unbounded_id_list[NML_TEST_UNBOUNDED_NAME_LIST_LENGTH]= {
	NML_TEST_UNBOUNDED_MSG_TYPE, /* 0,2021 */
	-1};
const size_t nml_test_unbounded_size_list[NML_TEST_UNBOUNDED_NAME_LIST_LENGTH]= {
	sizeof(NML_TEST_UNBOUNDED_MSG),
	0};
const char *nml_test_unbounded_symbol_lookup(long type);


// Enumerated Type Constants

/*
Estimated_size	NML_TEST_UNBOUNDED_MSG	58200
Estimated_size	ntu_s1	192
Estimated_size	MAXIMUM	58200
*/
/*
*	NML/CMS Format function : nml_test_unbounded_format
*/
int nml_test_unbounded_format(NMLTYPE type, void *buffer, CMS *cms)
{

	type = cms->check_type_info(type,buffer,"nml_test_unbounded",
		(cms_symbol_lookup_function_t) nml_test_unbounded_symbol_lookup,
		(const char **)nml_test_unbounded_name_list,
		nml_test_unbounded_id_list,nml_test_unbounded_size_list,
		NML_TEST_UNBOUNDED_NAME_LIST_LENGTH,
		MAX_NML_TEST_UNBOUNDED_NAME_LENGTH);

	switch(type)
	{
	case NML_TEST_UNBOUNDED_MSG_TYPE:
		((NML_TEST_UNBOUNDED_MSG *) buffer)->update(cms);
		break;

	default:
		return(0);
	}
	return 1;
}


// NML Symbol Lookup Function
const char *nml_test_unbounded_symbol_lookup(long type)
{
	switch(type)
	{
	case NML_TEST_UNBOUNDED_MSG_TYPE:
		return "NML_TEST_UNBOUNDED_MSG";
	default:
		return"UNKNOWN";
		break;
	}
	return(NULL);
}

/*
*	NML/CMS Update function for NML_TEST_UNBOUNDED_MSG
*	from nml_test_unbounded_format.hh:27
*/
void NML_TEST_UNBOUNDED_MSG::update(CMS *cms)
{

	cms->beginClass("NML_TEST_UNBOUNDED_MSG","NMLmsg");
	cms->update_with_name("i",i);
	cms->beginClassVar("s1");
	nmlupdate(cms,((ntu_s1 *)&s1));
	cms->endClassVar("s1");
	cms->next_update_default("National");
	cms->update_unbounded_with_name("name_ua",&name_ua,name_ua_length,name_ua_size_allocated);
	cms->update_unbounded_with_name("char_ua",&char_ua,char_ua_length,char_ua_size_allocated);
	cms->update_unbounded_with_name("u_char_ua",&u_char_ua,u_char_ua_length,u_char_ua_size_allocated);
	cms->update_unbounded_with_name("short_ua",&short_ua,short_ua_length,short_ua_size_allocated);
	cms->update_unbounded_with_name("u_short_ua",&u_short_ua,u_short_ua_length,u_short_ua_size_allocated);
	cms->update_unbounded_with_name("int_ua",&int_ua,int_ua_length,int_ua_size_allocated);
	cms->update_unbounded_with_name("u_int_ua",&u_int_ua,u_int_ua_length,u_int_ua_size_allocated);
	cms->update_unbounded_with_name("long_ua",&long_ua,long_ua_length,long_ua_size_allocated);
	cms->update_unbounded_with_name("u_long_ua",&u_long_ua,u_long_ua_length,u_long_ua_size_allocated);
	cms->update_unbounded_with_name("float_ua",&float_ua,float_ua_length,float_ua_size_allocated);
	cms->update_unbounded_with_name("double_ua",&double_ua,double_ua_length,double_ua_size_allocated);
	cms->beginClassVar("s1_2");
	nmlupdate(cms,((ntu_s1 *)&s1_2));
	cms->endClassVar("s1_2");
	for(int i_s1_a = 0;i_s1_a < 300 ;i_s1_a++)
	{
		cms->beginStructArrayElem("s1_a",i_s1_a);
		nmlupdate(cms, ( s1_a) + i_s1_a);
		cms->endStructArrayElem("s1_a",i_s1_a);
	}
	cms->update_with_name("end_i",end_i);
	cms->update_with_name("lastvar",lastvar);

	cms->endClass("NML_TEST_UNBOUNDED_MSG","NMLmsg");

}


/*
*	NML/CMS Update function for ntu_s1
*	from nml_test_unbounded_format.hh:0
*/
void nmlupdate(CMS *cms,ntu_s1 *x)
{

	cms->beginClass("ntu_s1",0);
	cms->update_with_name("i",x->i);
	cms->next_update_default("National");
	cms->update_unbounded_with_name("name_ua",&x->name_ua, x->name_ua_length, x->name_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_char_ua",&x->ntu_s1_char_ua, x->ntu_s1_char_ua_length, x->ntu_s1_char_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_u_char_ua",&x->ntu_s1_u_char_ua, x->ntu_s1_u_char_ua_length, x->ntu_s1_u_char_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_short_ua",&x->ntu_s1_short_ua, x->ntu_s1_short_ua_length, x->ntu_s1_short_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_u_short_ua",&x->ntu_s1_u_short_ua, x->ntu_s1_u_short_ua_length, x->ntu_s1_u_short_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_int_ua",&x->ntu_s1_int_ua, x->ntu_s1_int_ua_length, x->ntu_s1_int_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_u_int_ua",&x->ntu_s1_u_int_ua, x->ntu_s1_u_int_ua_length, x->ntu_s1_u_int_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_long_ua",&x->ntu_s1_long_ua, x->ntu_s1_long_ua_length, x->ntu_s1_long_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_u_long_ua",&x->ntu_s1_u_long_ua, x->ntu_s1_u_long_ua_length, x->ntu_s1_u_long_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_float_ua",&x->ntu_s1_float_ua, x->ntu_s1_float_ua_length, x->ntu_s1_float_ua_size_allocated);
	cms->update_unbounded_with_name("ntu_s1_double_ua",&x->ntu_s1_double_ua, x->ntu_s1_double_ua_length, x->ntu_s1_double_ua_size_allocated);
	cms->update_with_name("end_i",x->end_i);

	cms->endClass("ntu_s1",0);

}

/*
*	Constructor for NML_TEST_UNBOUNDED_MSG
*	from nml_test_unbounded_format.hh:27
*/
NML_TEST_UNBOUNDED_MSG::NML_TEST_UNBOUNDED_MSG()
	: NMLmsg(NML_TEST_UNBOUNDED_MSG_TYPE,sizeof(NML_TEST_UNBOUNDED_MSG))
{
	i = (int) 0;
	initialize_ntu_s1( &(s1));
	SET_NML_UNBOUNDED_STRING(	name_ua,"National");
	char_ua=0;
	char_ua_length=0;
	char_ua_size_allocated=0;
	u_char_ua=0;
	u_char_ua_length=0;
	u_char_ua_size_allocated=0;
	short_ua=0;
	short_ua_length=0;
	short_ua_size_allocated=0;
	u_short_ua=0;
	u_short_ua_length=0;
	u_short_ua_size_allocated=0;
	int_ua=0;
	int_ua_length=0;
	int_ua_size_allocated=0;
	u_int_ua=0;
	u_int_ua_length=0;
	u_int_ua_size_allocated=0;
	long_ua=0;
	long_ua_length=0;
	long_ua_size_allocated=0;
	u_long_ua=0;
	u_long_ua_length=0;
	u_long_ua_size_allocated=0;
	float_ua=0;
	float_ua_length=0;
	float_ua_size_allocated=0;
	double_ua=0;
	double_ua_length=0;
	double_ua_size_allocated=0;
	initialize_ntu_s1( &(s1_2));
	for(int i_s1_a=0; i_s1_a< 300; i_s1_a++)
	{
		initialize_ntu_s1(((ntu_s1*)s1_a)+i_s1_a);
	}
	end_i = (int) 0;
	lastvar = (int) 0;

}

/*
*	Initializer for ntu_s1
*/
void initialize_ntu_s1(ntu_s1* x)
{
	x->i = (int) 0;
	SET_NML_UNBOUNDED_STRING(	x->name_ua,"National");
	x->ntu_s1_char_ua=0;
	x->ntu_s1_char_ua_length=0;
	x->ntu_s1_char_ua_size_allocated=0;
	x->ntu_s1_u_char_ua=0;
	x->ntu_s1_u_char_ua_length=0;
	x->ntu_s1_u_char_ua_size_allocated=0;
	x->ntu_s1_short_ua=0;
	x->ntu_s1_short_ua_length=0;
	x->ntu_s1_short_ua_size_allocated=0;
	x->ntu_s1_u_short_ua=0;
	x->ntu_s1_u_short_ua_length=0;
	x->ntu_s1_u_short_ua_size_allocated=0;
	x->ntu_s1_int_ua=0;
	x->ntu_s1_int_ua_length=0;
	x->ntu_s1_int_ua_size_allocated=0;
	x->ntu_s1_u_int_ua=0;
	x->ntu_s1_u_int_ua_length=0;
	x->ntu_s1_u_int_ua_size_allocated=0;
	x->ntu_s1_long_ua=0;
	x->ntu_s1_long_ua_length=0;
	x->ntu_s1_long_ua_size_allocated=0;
	x->ntu_s1_u_long_ua=0;
	x->ntu_s1_u_long_ua_length=0;
	x->ntu_s1_u_long_ua_size_allocated=0;
	x->ntu_s1_float_ua=0;
	x->ntu_s1_float_ua_length=0;
	x->ntu_s1_float_ua_size_allocated=0;
	x->ntu_s1_double_ua=0;
	x->ntu_s1_double_ua_length=0;
	x->ntu_s1_double_ua_size_allocated=0;
	x->end_i = (int) 0;

}

