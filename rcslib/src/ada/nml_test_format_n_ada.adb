--
--      New Ada Body File starts here.
--      This file should be named nml_test_format_n_ada.adb
--      Automatically generated by NML CodeGen Java Applet.
--      on Wed Aug 25 09:21:03 EDT 2004
--

with Nml; use Nml;

with Cms;

-- Include other package files  that contain message definitions we might need.
with otherheader_n_ada; use otherheader_n_ada;

--      Some standard Ada Packages we always need.
with Unchecked_Deallocation;
with Unchecked_Conversion;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings; use Interfaces.C.Strings;

package body nml_test_format_n_ada is

        -- Create some common variables  and functions needed for updating Enumeration types.
        Enum_enumtest_Name_List : constant Char_Array(1..6) := (
                'a',nul,
                'b',nul,
                nul,nul
                );
        Enum_enumtest_Int_List : constant Cms.Int_Array(1..3) := (
                0, -- a
                1, -- b
                -1
                );
        enum_enumtest_a_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("+key+");
        enum_enumtest_b_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("+key+");
        function Enum_enumtest_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
        pragma Export(C,Enum_enumtest_Symbol_Lookup,"ada_enumtest_nml_test_format_n_ada_symbol_lookup");

        function Enum_enumtest_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
        begin
                case enum_int is
                        when 0  =>      return enum_enumtest_a_Key_Name; -- a
                        when 1  =>      return enum_enumtest_b_Key_Name; -- b
                        when others     =>      return Null_Ptr;
                end case;
        end Enum_enumtest_Symbol_Lookup;

        function Enum_enumtest_To_Int(enum_val: in enumtest) return int is
        begin
                case enum_val is
                        when b  =>      return 1;
                        when a  =>      return 0;
                        when Bad_enumtest_Value =>      return -1;
                end case;
        end Enum_enumtest_To_Int;

        function Int_To_Enum_enumtest(enum_int: in int) return enumtest is
        begin
                case enum_int is
                        when 1  =>      return b;
                        when 0  =>      return a;
                        when others     =>      return Bad_enumtest_Value;
                end case;
        end Int_To_Enum_enumtest;

        Enum_enumtest_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
                        "enumtest",
                        Enum_enumtest_Name_List,
                        Enum_enumtest_Int_List,
                        2,
                        2,
                        Enum_enumtest_Symbol_Lookup'Access);


        -- Every NMLmsg type needs an update and an initialize function.

        procedure Initialize(Msg : in out BOP_MSG) is
        begin
                Msg.NmlType := BOP_MSG_TYPE;
                Msg.Size := BOP_MSG'Size/8;
        end Initialize;

        procedure Update_BOP_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in BOP_MSG_Access) is
        begin
                Msg.NmlType := BOP_MSG_TYPE;
                Msg.Size := BOP_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"BOP_MSG","");
                Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ula", Msg.ula,4);
                Cms.End_Class(Cms_Ptr,"BOP_MSG","");
        end Update_BOP_MSG;

        procedure Update_Internal_BOP_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out BOP_MSG) is
        begin
                Msg.NmlType := BOP_MSG_TYPE;
                Msg.Size := BOP_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"BOP_MSG","");
                Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ula", Msg.ula,4);
                Cms.End_Class(Cms_Ptr,"BOP_MSG","");
        end Update_Internal_BOP_MSG;


        procedure Initialize(Msg : in out QTEST_MSG) is
        begin
                Msg.NmlType := QTEST_MSG_TYPE;
                Msg.Size := QTEST_MSG'Size/8;
        end Initialize;

        procedure Update_QTEST_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in QTEST_MSG_Access) is
        begin
                Msg.NmlType := QTEST_MSG_TYPE;
                Msg.Size := QTEST_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"QTEST_MSG","");
                Cms.Update_Int(Cms_Ptr, "priority", Msg.priority);
                Cms.Update_Int(Cms_Ptr, "pchanges_count", Msg.pchanges_count);
                Cms.Update_Int(Cms_Ptr, "count", Msg.count);
                Cms.Update_Int(Cms_Ptr, "pid", Msg.pid);
                Cms.Update_Char_Array(Cms_Ptr, "line", Msg.line,105);
                Cms.Update_Double(Cms_Ptr, "time", Msg.time);
                Cms.End_Class(Cms_Ptr,"QTEST_MSG","");
        end Update_QTEST_MSG;

        procedure Update_Internal_QTEST_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out QTEST_MSG) is
        begin
                Msg.NmlType := QTEST_MSG_TYPE;
                Msg.Size := QTEST_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"QTEST_MSG","");
                Cms.Update_Int(Cms_Ptr, "priority", Msg.priority);
                Cms.Update_Int(Cms_Ptr, "pchanges_count", Msg.pchanges_count);
                Cms.Update_Int(Cms_Ptr, "count", Msg.count);
                Cms.Update_Int(Cms_Ptr, "pid", Msg.pid);
                Cms.Update_Char_Array(Cms_Ptr, "line", Msg.line,105);
                Cms.Update_Double(Cms_Ptr, "time", Msg.time);
                Cms.End_Class(Cms_Ptr,"QTEST_MSG","");
        end Update_Internal_QTEST_MSG;


        procedure Initialize(Msg : in out SIMPLER_MSG) is
        begin
                Msg.NmlType := SIMPLER_MSG_TYPE;
                Msg.Size := SIMPLER_MSG'Size/8;
        end Initialize;

        procedure Update_SIMPLER_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in SIMPLER_MSG_Access) is
        begin
                Msg.NmlType := SIMPLER_MSG_TYPE;
                Msg.Size := SIMPLER_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"SIMPLER_MSG","");
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_Char_Array(Cms_Ptr, "cbuf", Msg.cbuf,80);
                Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
                Cms.End_Class(Cms_Ptr,"SIMPLER_MSG","");
        end Update_SIMPLER_MSG;

        procedure Update_Internal_SIMPLER_MSG(Cms_Ptr : in Cms.Cms_Access; Msg : in out SIMPLER_MSG) is
        begin
                Msg.NmlType := SIMPLER_MSG_TYPE;
                Msg.Size := SIMPLER_MSG'Size/8;
                Cms.Begin_Class(Cms_Ptr,"SIMPLER_MSG","");
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_Char_Array(Cms_Ptr, "cbuf", Msg.cbuf,80);
                Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
                Cms.End_Class(Cms_Ptr,"SIMPLER_MSG","");
        end Update_Internal_SIMPLER_MSG;


        procedure Initialize(Msg : in out TEST_MESSAGE_BASE) is
        begin
                Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
                Msg.Size := TEST_MESSAGE_BASE'Size/8;
        end Initialize;

        procedure Update_TEST_MESSAGE_BASE(Cms_Ptr : in Cms.Cms_Access; Msg : in TEST_MESSAGE_BASE_Access) is
        begin
                Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
                Msg.Size := TEST_MESSAGE_BASE'Size/8;
                Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
                Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
                Cms.End_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
        end Update_TEST_MESSAGE_BASE;

        procedure Update_Internal_TEST_MESSAGE_BASE(Cms_Ptr : in Cms.Cms_Access; Msg : in out TEST_MESSAGE_BASE) is
        begin
                Msg.NmlType := TEST_MESSAGE_BASE_TYPE;
                Msg.Size := TEST_MESSAGE_BASE'Size/8;
                Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
                Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
                Cms.End_Class(Cms_Ptr,"TEST_MESSAGE_BASE","");
        end Update_Internal_TEST_MESSAGE_BASE;


        procedure Update_c_struct(Cms_Ptr : in Cms.Cms_Access; Msg : in c_struct_Access) is
        begin
                Cms.Begin_Class(Cms_Ptr,"c_struct","");
                Cms.Update_Char(Cms_Ptr, "csc", Msg.csc);
                Cms.Update_Int(Cms_Ptr, "csi", Msg.csi);
                Cms.End_Class(Cms_Ptr,"c_struct","");
        end Update_c_struct;

        procedure Update_Internal_c_struct(Cms_Ptr : in Cms.Cms_Access; Msg : in out c_struct) is
        begin
                Cms.Begin_Class(Cms_Ptr,"c_struct","");
                Cms.Update_Char(Cms_Ptr, "csc", Msg.csc);
                Cms.Update_Int(Cms_Ptr, "csi", Msg.csi);
                Cms.End_Class(Cms_Ptr,"c_struct","");
        end Update_Internal_c_struct;


        procedure Update_teststruct(Cms_Ptr : in Cms.Cms_Access; Msg : in teststruct_Access) is
        begin
                Cms.Begin_Class(Cms_Ptr,"teststruct","");
                Cms.Begin_Class_Var(Cms_Ptr,"cs");
                Update_Internal_c_struct(Cms_Ptr,Msg.cs);
                Cms.End_Class_Var(Cms_Ptr,"cs");
                Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_Char(Cms_Ptr, "c", Msg.c);
                Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
                Cms.Update_Double(Cms_Ptr, "d", Msg.d);
                Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
                Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,4);
                Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,4);
                Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,4);
                Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,4);
                Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,16);
                Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,64);
                Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
                Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
                Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
                Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
                Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
                Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
                Cms.End_Class(Cms_Ptr,"teststruct","");
        end Update_teststruct;

        procedure Update_Internal_teststruct(Cms_Ptr : in Cms.Cms_Access; Msg : in out teststruct) is
        begin
                Cms.Begin_Class(Cms_Ptr,"teststruct","");
                Cms.Begin_Class_Var(Cms_Ptr,"cs");
                Update_Internal_c_struct(Cms_Ptr,Msg.cs);
                Cms.End_Class_Var(Cms_Ptr,"cs");
                Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_Char(Cms_Ptr, "c", Msg.c);
                Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
                Cms.Update_Double(Cms_Ptr, "d", Msg.d);
                Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
                Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,4);
                Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,4);
                Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,4);
                Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,4);
                Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,16);
                Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,64);
                Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
                Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
                Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
                Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
                Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
                Cms.Update_Char_Array(Cms_Ptr, "endtsbuf", Msg.endtsbuf,16);
                Cms.End_Class(Cms_Ptr,"teststruct","");
        end Update_Internal_teststruct;


        procedure Initialize(Msg : in out TEST_MESSAGE) is
        begin
                Msg.NmlType := TEST_MESSAGE_TYPE;
                Msg.Size := TEST_MESSAGE'Size/8;
        end Initialize;

        procedure Update_TEST_MESSAGE(Cms_Ptr : in Cms.Cms_Access; Msg : in TEST_MESSAGE_Access) is
        begin
                Msg.NmlType := TEST_MESSAGE_TYPE;
                Msg.Size := TEST_MESSAGE'Size/8;
                Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE","");
                Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
                Cms.Begin_Class_Var(Cms_Ptr,"sfoh");
                Update_Internal_struct_from_other_header(Cms_Ptr,Msg.sfoh);
                Cms.End_Class_Var(Cms_Ptr,"sfoh");
                Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
                Cms.Update_Char(Cms_Ptr, "c", Msg.c);
                Cms.Update_Double(Cms_Ptr, "d", Msg.d);
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
                Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
                Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,4);
                Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,4);
                Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,4);
                Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,4);
                Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,16);
                Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,64);
                Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
                Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
                Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
                Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
                Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
                Cms.Begin_Class_Var(Cms_Ptr,"s");
                Update_Internal_teststruct(Cms_Ptr,Msg.s);
                Cms.End_Class_Var(Cms_Ptr,"s");
                for sa_Index in Msg.sa'Range
                loop
                        Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
                        Update_Internal_Teststruct(Cms_Ptr, Msg.sa(sa_Index));
                        Cms.End_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
                end loop;
                Cms.Update_Dla_Length(Cms_Ptr,"sda_length", Msg.sda_Length);
                Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
                for sda_Index in Msg.sda'Range
                loop
                        if int(sda_Index - Msg.sda'First) >= Msg.sda_Length then
                                exit;
                        end if;
                        Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
                        Update_Internal_Teststruct(Cms_Ptr, Msg.sda(sda_Index));
                        Cms.End_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
                end loop;
                Cms.End_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
                Msg.enumtestvar := Int_To_Enum_Enumtest(
                        Cms.Update_Enumeration(Cms_Ptr, "enumtestvar", Enum_Enumtest_To_Int(Msg.enumtestvar), Enum_Enumtest_Info));
                Cms.Begin_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
                for enum_array_Index in Msg.enum_array'Range
                loop
                        Msg.enum_array(enum_array_Index) := Int_To_Enum_Enumtest(
                                Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enum_array", Enum_Enumtest_To_Int(Msg.enum_array(enum_array_Index)),int(enum_array_Index-Msg.enum_array'First)));
                end loop;
                Cms.End_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
                Cms.Update_Dla_Length(Cms_Ptr,"enumtest_dla_length", Msg.enumtest_dla_Length);
                Cms.Begin_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
                for enumtest_dla_Index in Msg.enumtest_dla'Range
                loop
                        if int(enumtest_dla_Index-Msg.enumtest_dla'First) >= Msg.enumtest_dla_Length then
                                exit;
                        end if;
                        Msg.enumtest_dla(enumtest_dla_Index) := Int_To_Enum_Enumtest(
                                Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enumtest_dla", Enum_Enumtest_To_Int(Msg.enumtest_dla(enumtest_dla_Index)),int(enumtest_dla_Index-Msg.enumtest_dla'First)));
                end loop;
                Cms.End_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
                Cms.Update_Boolean(Cms_Ptr, "do_int_size_test", Msg.do_int_size_test);
                Cms.Update_Short(Cms_Ptr, "smin", Msg.smin);
                Cms.Update_Short(Cms_Ptr, "smax", Msg.smax);
                Cms.Update_Int(Cms_Ptr, "i_smin", Msg.i_smin);
                Cms.Update_Int(Cms_Ptr, "i_smax", Msg.i_smax);
                Cms.Update_Int(Cms_Ptr, "imin", Msg.imin);
                Cms.Update_Int(Cms_Ptr, "imax", Msg.imax);
                Cms.Update_Long(Cms_Ptr, "l_imin", Msg.l_imin);
                Cms.Update_Long(Cms_Ptr, "l_imax", Msg.l_imax);
                Cms.Update_Long(Cms_Ptr, "lmin", Msg.lmin);
                Cms.Update_Long(Cms_Ptr, "lmax", Msg.lmax);
                Cms.Update_Unsigned_Short(Cms_Ptr, "usmax", Msg.usmax);
                Cms.Update_Unsigned(Cms_Ptr, "ui_usmax", Msg.ui_usmax);
                Cms.Update_Unsigned(Cms_Ptr, "uimax", Msg.uimax);
                Cms.Update_Unsigned_Long(Cms_Ptr, "ul_uimax", Msg.ul_uimax);
                Cms.Update_Unsigned_Long(Cms_Ptr, "ulmax", Msg.ulmax);
                Cms.Update_Double(Cms_Ptr, "d_ulmax", Msg.d_ulmax);
                Cms.Update_Double(Cms_Ptr, "d_lmin", Msg.d_lmin);
                Cms.Update_Double(Cms_Ptr, "d_lmax", Msg.d_lmax);
                Cms.Update_Short_Array(Cms_Ptr, "s_array", Msg.s_array,3);
                Cms.Update_Int_Array(Cms_Ptr, "i_array", Msg.i_array,3);
                Cms.Update_Long_Array(Cms_Ptr, "l_array", Msg.l_array,3);
                Cms.Update_Unsigned_Short_Array(Cms_Ptr, "us_array", Msg.us_array,2);
                Cms.Update_Unsigned_Array(Cms_Ptr, "ui_array", Msg.ui_array,2);
                Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ul_array", Msg.ul_array,2);
                Cms.Update_Boolean(Cms_Ptr, "false_bool", Msg.false_bool);
                Cms.Update_Boolean(Cms_Ptr, "true_bool", Msg.true_bool);
                Cms.Update_Short(Cms_Ptr, "sminusone", Msg.sminusone);
                Cms.Update_Int(Cms_Ptr, "iminusone", Msg.iminusone);
                Cms.Update_Long(Cms_Ptr, "lminusone", Msg.lminusone);
                Cms.Update_C_Float(Cms_Ptr, "fminusone", Msg.fminusone);
                Cms.Update_Double(Cms_Ptr, "dminusone", Msg.dminusone);
                Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
                Cms.End_Class(Cms_Ptr,"TEST_MESSAGE","");
        end Update_TEST_MESSAGE;

        procedure Update_Internal_TEST_MESSAGE(Cms_Ptr : in Cms.Cms_Access; Msg : in out TEST_MESSAGE) is
        begin
                Msg.NmlType := TEST_MESSAGE_TYPE;
                Msg.Size := TEST_MESSAGE'Size/8;
                Cms.Begin_Class(Cms_Ptr,"TEST_MESSAGE","");
                Cms.Update_Int(Cms_Ptr, "test_message_base_var", Msg.test_message_base_var);
                Cms.Begin_Class_Var(Cms_Ptr,"sfoh");
                Update_Internal_struct_from_other_header(Cms_Ptr,Msg.sfoh);
                Cms.End_Class_Var(Cms_Ptr,"sfoh");
                Cms.Update_Boolean(Cms_Ptr, "b", Msg.b);
                Cms.Update_Char(Cms_Ptr, "c", Msg.c);
                Cms.Update_Double(Cms_Ptr, "d", Msg.d);
                Cms.Update_Int(Cms_Ptr, "i", Msg.i);
                Cms.Update_C_Float(Cms_Ptr, "f", Msg.f);
                Cms.Update_Boolean_Array(Cms_Ptr, "bool_array", Msg.bool_array,4);
                Cms.Update_Int_Array(Cms_Ptr, "ia", Msg.ia,4);
                Cms.Update_Char_Array(Cms_Ptr, "ca", Msg.ca,4);
                Cms.Update_C_Float_Array(Cms_Ptr, "fa", Msg.fa,4);
                Cms.Update_Double_Array(Cms_Ptr, "da", Msg.da,4);
                Cms.Update_Double_Array(Cms_Ptr, "two_d_array", Msg.two_d_array,16);
                Cms.Update_Double_Array(Cms_Ptr, "three_d_array", Msg.three_d_array,64);
                Cms.Update_Dla_Length(Cms_Ptr,"cda_length", Msg.cda_Length);
                Cms.Update_Char_Dla(Cms_Ptr, "cda", Msg.cda,Msg.cda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"ida_length", Msg.ida_Length);
                Cms.Update_Int_Dla(Cms_Ptr, "ida", Msg.ida,Msg.ida_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"fda_length", Msg.fda_Length);
                Cms.Update_C_Float_Dla(Cms_Ptr, "fda", Msg.fda,Msg.fda_length,8);
                Cms.Update_Dla_Length(Cms_Ptr,"dda_length", Msg.dda_Length);
                Cms.Update_Double_Dla(Cms_Ptr, "dda", Msg.dda,Msg.dda_length,8);
                Cms.Begin_Class_Var(Cms_Ptr,"s");
                Update_Internal_teststruct(Cms_Ptr,Msg.s);
                Cms.End_Class_Var(Cms_Ptr,"s");
                for sa_Index in Msg.sa'Range
                loop
                        Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
                        Update_Internal_Teststruct(Cms_Ptr, Msg.sa(sa_Index));
                        Cms.End_Struct_Array_Elem(Cms_Ptr,"sa",int(sa_Index - Msg.sa'First));
                end loop;
                Cms.Update_Dla_Length(Cms_Ptr,"sda_length", Msg.sda_Length);
                Cms.Begin_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
                for sda_Index in Msg.sda'Range
                loop
                        if int(sda_Index - Msg.sda'First) >= Msg.sda_Length then
                                exit;
                        end if;
                        Cms.Begin_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
                        Update_Internal_Teststruct(Cms_Ptr, Msg.sda(sda_Index));
                        Cms.End_Struct_Array_Elem(Cms_Ptr,"sda",int(sda_Index - Msg.sda'First));
                end loop;
                Cms.End_Struct_Dynamic_Array(Cms_Ptr,"sda",Msg.sda_Length,Msg.sda'Length);
                Msg.enumtestvar := Int_To_Enum_Enumtest(
                        Cms.Update_Enumeration(Cms_Ptr, "enumtestvar", Enum_Enumtest_To_Int(Msg.enumtestvar), Enum_Enumtest_Info));
                Cms.Begin_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
                for enum_array_Index in Msg.enum_array'Range
                loop
                        Msg.enum_array(enum_array_Index) := Int_To_Enum_Enumtest(
                                Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enum_array", Enum_Enumtest_To_Int(Msg.enum_array(enum_array_Index)),int(enum_array_Index-Msg.enum_array'First)));
                end loop;
                Cms.End_Enumeration_Array(Cms_Ptr,"enum_array", Enum_Enumtest_Info,5);
                Cms.Update_Dla_Length(Cms_Ptr,"enumtest_dla_length", Msg.enumtest_dla_Length);
                Cms.Begin_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
                for enumtest_dla_Index in Msg.enumtest_dla'Range
                loop
                        if int(enumtest_dla_Index-Msg.enumtest_dla'First) >= Msg.enumtest_dla_Length then
                                exit;
                        end if;
                        Msg.enumtest_dla(enumtest_dla_Index) := Int_To_Enum_Enumtest(
                                Cms.Update_Enumeration_Array_Elem(Cms_Ptr, "enumtest_dla", Enum_Enumtest_To_Int(Msg.enumtest_dla(enumtest_dla_Index)),int(enumtest_dla_Index-Msg.enumtest_dla'First)));
                end loop;
                Cms.End_Enumeration_Dla(Cms_Ptr,"enumtest_dla", Enum_Enumtest_Info, Msg.enumtest_dla_Length,7);
                Cms.Update_Boolean(Cms_Ptr, "do_int_size_test", Msg.do_int_size_test);
                Cms.Update_Short(Cms_Ptr, "smin", Msg.smin);
                Cms.Update_Short(Cms_Ptr, "smax", Msg.smax);
                Cms.Update_Int(Cms_Ptr, "i_smin", Msg.i_smin);
                Cms.Update_Int(Cms_Ptr, "i_smax", Msg.i_smax);
                Cms.Update_Int(Cms_Ptr, "imin", Msg.imin);
                Cms.Update_Int(Cms_Ptr, "imax", Msg.imax);
                Cms.Update_Long(Cms_Ptr, "l_imin", Msg.l_imin);
                Cms.Update_Long(Cms_Ptr, "l_imax", Msg.l_imax);
                Cms.Update_Long(Cms_Ptr, "lmin", Msg.lmin);
                Cms.Update_Long(Cms_Ptr, "lmax", Msg.lmax);
                Cms.Update_Unsigned_Short(Cms_Ptr, "usmax", Msg.usmax);
                Cms.Update_Unsigned(Cms_Ptr, "ui_usmax", Msg.ui_usmax);
                Cms.Update_Unsigned(Cms_Ptr, "uimax", Msg.uimax);
                Cms.Update_Unsigned_Long(Cms_Ptr, "ul_uimax", Msg.ul_uimax);
                Cms.Update_Unsigned_Long(Cms_Ptr, "ulmax", Msg.ulmax);
                Cms.Update_Double(Cms_Ptr, "d_ulmax", Msg.d_ulmax);
                Cms.Update_Double(Cms_Ptr, "d_lmin", Msg.d_lmin);
                Cms.Update_Double(Cms_Ptr, "d_lmax", Msg.d_lmax);
                Cms.Update_Short_Array(Cms_Ptr, "s_array", Msg.s_array,3);
                Cms.Update_Int_Array(Cms_Ptr, "i_array", Msg.i_array,3);
                Cms.Update_Long_Array(Cms_Ptr, "l_array", Msg.l_array,3);
                Cms.Update_Unsigned_Short_Array(Cms_Ptr, "us_array", Msg.us_array,2);
                Cms.Update_Unsigned_Array(Cms_Ptr, "ui_array", Msg.ui_array,2);
                Cms.Update_Unsigned_Long_Array(Cms_Ptr, "ul_array", Msg.ul_array,2);
                Cms.Update_Boolean(Cms_Ptr, "false_bool", Msg.false_bool);
                Cms.Update_Boolean(Cms_Ptr, "true_bool", Msg.true_bool);
                Cms.Update_Short(Cms_Ptr, "sminusone", Msg.sminusone);
                Cms.Update_Int(Cms_Ptr, "iminusone", Msg.iminusone);
                Cms.Update_Long(Cms_Ptr, "lminusone", Msg.lminusone);
                Cms.Update_C_Float(Cms_Ptr, "fminusone", Msg.fminusone);
                Cms.Update_Double(Cms_Ptr, "dminusone", Msg.dminusone);
                Cms.Update_Long(Cms_Ptr, "lastvar", Msg.lastvar);
                Cms.End_Class(Cms_Ptr,"TEST_MESSAGE","");
        end Update_Internal_TEST_MESSAGE;



        NameList : constant Char_Array(1..108) := (
                'B','O','P','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
                'Q','T','E','S','T','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,nul,nul,
                'S','I','M','P','L','E','R','_','M','S','G',nul,nul,nul,nul,nul,nul,nul,
                'T','E','S','T','_','M','E','S','S','A','G','E',nul,nul,nul,nul,nul,nul,
                'T','E','S','T','_','M','E','S','S','A','G','E','_','B','A','S','E',nul,
                nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
                );

        IdList : constant Cms.Long_Array(1..6) := (
                BOP_MSG_TYPE, -- 104, 0
                QTEST_MSG_TYPE, -- 103, 1
                SIMPLER_MSG_TYPE, -- 102, 2
                TEST_MESSAGE_TYPE, -- 101, 3
                TEST_MESSAGE_BASE_TYPE, -- 100, 4
                -1);

        SizeList : constant Cms.Size_T_Array(1..6) := (
                BOP_MSG'Size/8,
                QTEST_MSG'Size/8,
                SIMPLER_MSG'Size/8,
                TEST_MESSAGE'Size/8,
                TEST_MESSAGE_BASE'Size/8,
                0);
        Symbol_Lookup_BOP_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("BOP_MSG");
        Symbol_Lookup_QTEST_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("QTEST_MSG");
        Symbol_Lookup_SIMPLER_MSG_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SIMPLER_MSG");
        Symbol_Lookup_TEST_MESSAGE_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TEST_MESSAGE");
        Symbol_Lookup_TEST_MESSAGE_BASE_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("TEST_MESSAGE_BASE");

        function Symbol_Lookup(Nml_Type : in long) return Interfaces.C.Strings.Chars_Ptr;
        pragma Export(C,Symbol_Lookup,"ada_nml_test_format_n_ada_symbol_lookup");

        function Symbol_Lookup(Nml_Type : in long) return Interfaces.C.Strings.Chars_Ptr is
        begin
                case Nml_Type is
                         when BOP_MSG_TYPE      =>      return Symbol_Lookup_BOP_MSG_Name;
                         when QTEST_MSG_TYPE    =>      return Symbol_Lookup_QTEST_MSG_Name;
                         when SIMPLER_MSG_TYPE  =>      return Symbol_Lookup_SIMPLER_MSG_Name;
                         when TEST_MESSAGE_TYPE =>      return Symbol_Lookup_TEST_MESSAGE_Name;
                         when TEST_MESSAGE_BASE_TYPE    =>      return Symbol_Lookup_TEST_MESSAGE_BASE_Name;
                         when others    =>      return Null_Ptr;
                end case;
        end Symbol_Lookup;

        function Format(Nml_Type : in long;
                        Msg : in NmlMsg_Access;
                        Cms_Ptr : in Cms.Cms_Access)
                                return int is
                Checked_Nml_Type : long;

        begin
                Checked_Nml_Type := Cms.Check_Type_Info(Cms_Ptr,Nml_Type,
                        NmlMsg_Access_To_Limited_Controlled_Access(Msg),
                        "nml_test_format_n_ada",
                        Symbol_Lookup'Access,
                        NameList,IdList,SizeList,6,18);

                if Msg = Null then
                        return 0;
                end if;

                case Checked_Nml_Type is
                        when BOP_MSG_TYPE       =>      Update_BOP_MSG(Cms_Ptr, NmlMsg_to_BOP_MSG(Msg));
                        when QTEST_MSG_TYPE     =>      Update_QTEST_MSG(Cms_Ptr, NmlMsg_to_QTEST_MSG(Msg));
                        when SIMPLER_MSG_TYPE   =>      Update_SIMPLER_MSG(Cms_Ptr, NmlMsg_to_SIMPLER_MSG(Msg));
                        when TEST_MESSAGE_BASE_TYPE     =>      Update_TEST_MESSAGE_BASE(Cms_Ptr, NmlMsg_to_TEST_MESSAGE_BASE(Msg));
                        when TEST_MESSAGE_TYPE  =>      Update_TEST_MESSAGE(Cms_Ptr, NmlMsg_to_TEST_MESSAGE(Msg));
                        when others     =>      return 0;
                end case;
                return 1;
        end Format;

end nml_test_format_n_ada;

-- End of Ada Body file  nml_test_format_n_ada.adb

