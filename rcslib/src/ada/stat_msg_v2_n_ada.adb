--
--	New Ada Body File starts here.
--	This file should be named stat_msg_v2_n_ada.adb
--	Automatically generated by NML CodeGen Java Applet.
--	on Sat Mar 25 18:51:52 EST 2006
--

with Nml_Msg; use Nml_Msg;

with Posemath_N_Ada;  use Posemath_N_Ada;

with Cms;

-- Include other package files  that contain message definitions we might need.
with stat_msg_n_ada; use stat_msg_n_ada;
with timetracker_n_ada; use timetracker_n_ada;

--	Some standard Ada Packages we always need.
with Unchecked_Deallocation;
with Unchecked_Conversion;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings; use Interfaces.C.Strings;

package body stat_msg_v2_n_ada is

	-- Create some common variables  and functions needed for updating Enumeration types.
	Enum_RCS_STATE_Name_List : constant Char_Array(1..1080) := (
		'N','E','W','_','C','O','M','M','A','N','D',nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'N','O','P','_','S','T','A','T','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','0',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','0',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','1',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','3',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','4',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','5',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','6',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','7',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','8',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','1','9',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','0',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','1',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','3',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','4',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','5',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','6',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','7',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','8',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','2','9',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','0',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','1',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','3',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','4',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','5',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','6',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','7',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','8',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','3','9',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','4',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','5',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','6',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','7',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','8',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','9',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','0',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','1',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','2',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','3',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','4',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','5',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','6',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','7',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','8',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'S','E','9',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'U','N','I','N','I','T','I','A','L','I','Z','E','D','_','S','T','A','T','E',nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_RCS_STATE_Int_List : constant Cms.Int_Array(1..54) := (
		-2, -- NEW_COMMAND
		-3, -- NOP_STATE
		0, -- S0
		1, -- S1
		10, -- S10
		11, -- S11
		12, -- S12
		13, -- S13
		14, -- S14
		15, -- S15
		16, -- S16
		17, -- S17
		18, -- S18
		19, -- S19
		2, -- S2
		20, -- S20
		21, -- S21
		22, -- S22
		23, -- S23
		24, -- S24
		25, -- S25
		26, -- S26
		27, -- S27
		28, -- S28
		29, -- S29
		3, -- S3
		30, -- S30
		31, -- S31
		32, -- S32
		33, -- S33
		34, -- S34
		35, -- S35
		36, -- S36
		37, -- S37
		38, -- S38
		39, -- S39
		4, -- S4
		5, -- S5
		6, -- S6
		7, -- S7
		8, -- S8
		9, -- S9
		-10, -- SE0
		-11, -- SE1
		-12, -- SE2
		-13, -- SE3
		-14, -- SE4
		-15, -- SE5
		-16, -- SE6
		-17, -- SE7
		-18, -- SE8
		-19, -- SE9
		-1, -- UNINITIALIZED_STATE
		-1
		);
	enum_RCS_STATE_NEW_COMMAND_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("NEW_COMMAND");
	enum_RCS_STATE_NOP_STATE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("NOP_STATE");
	enum_RCS_STATE_S0_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S0");
	enum_RCS_STATE_S1_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S1");
	enum_RCS_STATE_S10_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S10");
	enum_RCS_STATE_S11_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S11");
	enum_RCS_STATE_S12_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S12");
	enum_RCS_STATE_S13_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S13");
	enum_RCS_STATE_S14_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S14");
	enum_RCS_STATE_S15_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S15");
	enum_RCS_STATE_S16_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S16");
	enum_RCS_STATE_S17_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S17");
	enum_RCS_STATE_S18_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S18");
	enum_RCS_STATE_S19_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S19");
	enum_RCS_STATE_S2_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S2");
	enum_RCS_STATE_S20_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S20");
	enum_RCS_STATE_S21_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S21");
	enum_RCS_STATE_S22_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S22");
	enum_RCS_STATE_S23_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S23");
	enum_RCS_STATE_S24_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S24");
	enum_RCS_STATE_S25_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S25");
	enum_RCS_STATE_S26_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S26");
	enum_RCS_STATE_S27_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S27");
	enum_RCS_STATE_S28_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S28");
	enum_RCS_STATE_S29_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S29");
	enum_RCS_STATE_S3_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S3");
	enum_RCS_STATE_S30_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S30");
	enum_RCS_STATE_S31_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S31");
	enum_RCS_STATE_S32_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S32");
	enum_RCS_STATE_S33_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S33");
	enum_RCS_STATE_S34_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S34");
	enum_RCS_STATE_S35_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S35");
	enum_RCS_STATE_S36_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S36");
	enum_RCS_STATE_S37_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S37");
	enum_RCS_STATE_S38_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S38");
	enum_RCS_STATE_S39_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S39");
	enum_RCS_STATE_S4_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S4");
	enum_RCS_STATE_S5_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S5");
	enum_RCS_STATE_S6_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S6");
	enum_RCS_STATE_S7_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S7");
	enum_RCS_STATE_S8_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S8");
	enum_RCS_STATE_S9_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("S9");
	enum_RCS_STATE_SE0_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE0");
	enum_RCS_STATE_SE1_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE1");
	enum_RCS_STATE_SE2_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE2");
	enum_RCS_STATE_SE3_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE3");
	enum_RCS_STATE_SE4_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE4");
	enum_RCS_STATE_SE5_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE5");
	enum_RCS_STATE_SE6_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE6");
	enum_RCS_STATE_SE7_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE7");
	enum_RCS_STATE_SE8_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE8");
	enum_RCS_STATE_SE9_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("SE9");
	enum_RCS_STATE_UNINITIALIZED_STATE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UNINITIALIZED_STATE");
	function Enum_RCS_STATE_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_RCS_STATE_Symbol_Lookup,"ada_RCS_STATE_stat_msg_v2_n_ada_symbol_lookup");

	function Enum_RCS_STATE_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when -2	=>	return enum_RCS_STATE_NEW_COMMAND_Key_Name; -- NEW_COMMAND
			when -3	=>	return enum_RCS_STATE_NOP_STATE_Key_Name; -- NOP_STATE
			when 0	=>	return enum_RCS_STATE_S0_Key_Name; -- S0
			when 1	=>	return enum_RCS_STATE_S1_Key_Name; -- S1
			when 10	=>	return enum_RCS_STATE_S10_Key_Name; -- S10
			when 11	=>	return enum_RCS_STATE_S11_Key_Name; -- S11
			when 12	=>	return enum_RCS_STATE_S12_Key_Name; -- S12
			when 13	=>	return enum_RCS_STATE_S13_Key_Name; -- S13
			when 14	=>	return enum_RCS_STATE_S14_Key_Name; -- S14
			when 15	=>	return enum_RCS_STATE_S15_Key_Name; -- S15
			when 16	=>	return enum_RCS_STATE_S16_Key_Name; -- S16
			when 17	=>	return enum_RCS_STATE_S17_Key_Name; -- S17
			when 18	=>	return enum_RCS_STATE_S18_Key_Name; -- S18
			when 19	=>	return enum_RCS_STATE_S19_Key_Name; -- S19
			when 2	=>	return enum_RCS_STATE_S2_Key_Name; -- S2
			when 20	=>	return enum_RCS_STATE_S20_Key_Name; -- S20
			when 21	=>	return enum_RCS_STATE_S21_Key_Name; -- S21
			when 22	=>	return enum_RCS_STATE_S22_Key_Name; -- S22
			when 23	=>	return enum_RCS_STATE_S23_Key_Name; -- S23
			when 24	=>	return enum_RCS_STATE_S24_Key_Name; -- S24
			when 25	=>	return enum_RCS_STATE_S25_Key_Name; -- S25
			when 26	=>	return enum_RCS_STATE_S26_Key_Name; -- S26
			when 27	=>	return enum_RCS_STATE_S27_Key_Name; -- S27
			when 28	=>	return enum_RCS_STATE_S28_Key_Name; -- S28
			when 29	=>	return enum_RCS_STATE_S29_Key_Name; -- S29
			when 3	=>	return enum_RCS_STATE_S3_Key_Name; -- S3
			when 30	=>	return enum_RCS_STATE_S30_Key_Name; -- S30
			when 31	=>	return enum_RCS_STATE_S31_Key_Name; -- S31
			when 32	=>	return enum_RCS_STATE_S32_Key_Name; -- S32
			when 33	=>	return enum_RCS_STATE_S33_Key_Name; -- S33
			when 34	=>	return enum_RCS_STATE_S34_Key_Name; -- S34
			when 35	=>	return enum_RCS_STATE_S35_Key_Name; -- S35
			when 36	=>	return enum_RCS_STATE_S36_Key_Name; -- S36
			when 37	=>	return enum_RCS_STATE_S37_Key_Name; -- S37
			when 38	=>	return enum_RCS_STATE_S38_Key_Name; -- S38
			when 39	=>	return enum_RCS_STATE_S39_Key_Name; -- S39
			when 4	=>	return enum_RCS_STATE_S4_Key_Name; -- S4
			when 5	=>	return enum_RCS_STATE_S5_Key_Name; -- S5
			when 6	=>	return enum_RCS_STATE_S6_Key_Name; -- S6
			when 7	=>	return enum_RCS_STATE_S7_Key_Name; -- S7
			when 8	=>	return enum_RCS_STATE_S8_Key_Name; -- S8
			when 9	=>	return enum_RCS_STATE_S9_Key_Name; -- S9
			when -10	=>	return enum_RCS_STATE_SE0_Key_Name; -- SE0
			when -11	=>	return enum_RCS_STATE_SE1_Key_Name; -- SE1
			when -12	=>	return enum_RCS_STATE_SE2_Key_Name; -- SE2
			when -13	=>	return enum_RCS_STATE_SE3_Key_Name; -- SE3
			when -14	=>	return enum_RCS_STATE_SE4_Key_Name; -- SE4
			when -15	=>	return enum_RCS_STATE_SE5_Key_Name; -- SE5
			when -16	=>	return enum_RCS_STATE_SE6_Key_Name; -- SE6
			when -17	=>	return enum_RCS_STATE_SE7_Key_Name; -- SE7
			when -18	=>	return enum_RCS_STATE_SE8_Key_Name; -- SE8
			when -19	=>	return enum_RCS_STATE_SE9_Key_Name; -- SE9
			when -1	=>	return enum_RCS_STATE_UNINITIALIZED_STATE_Key_Name; -- UNINITIALIZED_STATE
			when others	=>	return Null_Ptr;
		end case;
	end Enum_RCS_STATE_Symbol_Lookup;

	function Enum_RCS_STATE_To_Int(enum_val: in RCS_STATE) return int is
	begin
		case enum_val is
			when S39	=>	return 39;
			when S38	=>	return 38;
			when S37	=>	return 37;
			when S36	=>	return 36;
			when S35	=>	return 35;
			when S34	=>	return 34;
			when S33	=>	return 33;
			when UNINITIALIZED_STATE	=>	return -1;
			when S32	=>	return 32;
			when S31	=>	return 31;
			when S30	=>	return 30;
			when SE9	=>	return -19;
			when SE8	=>	return -18;
			when NEW_COMMAND	=>	return -2;
			when SE7	=>	return -17;
			when SE6	=>	return -16;
			when S9	=>	return 9;
			when SE5	=>	return -15;
			when S8	=>	return 8;
			when SE4	=>	return -14;
			when S7	=>	return 7;
			when SE3	=>	return -13;
			when S6	=>	return 6;
			when SE2	=>	return -12;
			when S5	=>	return 5;
			when SE1	=>	return -11;
			when S4	=>	return 4;
			when SE0	=>	return -10;
			when S3	=>	return 3;
			when S2	=>	return 2;
			when S1	=>	return 1;
			when S0	=>	return 0;
			when S29	=>	return 29;
			when S28	=>	return 28;
			when S27	=>	return 27;
			when S26	=>	return 26;
			when S25	=>	return 25;
			when S24	=>	return 24;
			when S23	=>	return 23;
			when S22	=>	return 22;
			when S21	=>	return 21;
			when S20	=>	return 20;
			when NOP_STATE	=>	return -3;
			when S19	=>	return 19;
			when S18	=>	return 18;
			when S17	=>	return 17;
			when S16	=>	return 16;
			when S15	=>	return 15;
			when S14	=>	return 14;
			when S13	=>	return 13;
			when S12	=>	return 12;
			when S11	=>	return 11;
			when S10	=>	return 10;
			when Bad_RCS_STATE_Value	=>	return -1;
		end case;
	end Enum_RCS_STATE_To_Int;

	function Int_To_Enum_RCS_STATE(enum_int: in int) return RCS_STATE is
	begin
		case enum_int is
			when 39	=>	return S39;
			when 38	=>	return S38;
			when 37	=>	return S37;
			when 36	=>	return S36;
			when 35	=>	return S35;
			when 34	=>	return S34;
			when 33	=>	return S33;
			when -1	=>	return UNINITIALIZED_STATE;
			when 32	=>	return S32;
			when 31	=>	return S31;
			when 30	=>	return S30;
			when -19	=>	return SE9;
			when -18	=>	return SE8;
			when -2	=>	return NEW_COMMAND;
			when -17	=>	return SE7;
			when -16	=>	return SE6;
			when 9	=>	return S9;
			when -15	=>	return SE5;
			when 8	=>	return S8;
			when -14	=>	return SE4;
			when 7	=>	return S7;
			when -13	=>	return SE3;
			when 6	=>	return S6;
			when -12	=>	return SE2;
			when 5	=>	return S5;
			when -11	=>	return SE1;
			when 4	=>	return S4;
			when -10	=>	return SE0;
			when 3	=>	return S3;
			when 2	=>	return S2;
			when 1	=>	return S1;
			when 0	=>	return S0;
			when 29	=>	return S29;
			when 28	=>	return S28;
			when 27	=>	return S27;
			when 26	=>	return S26;
			when 25	=>	return S25;
			when 24	=>	return S24;
			when 23	=>	return S23;
			when 22	=>	return S22;
			when 21	=>	return S21;
			when 20	=>	return S20;
			when -3	=>	return NOP_STATE;
			when 19	=>	return S19;
			when 18	=>	return S18;
			when 17	=>	return S17;
			when 16	=>	return S16;
			when 15	=>	return S15;
			when 14	=>	return S14;
			when 13	=>	return S13;
			when 12	=>	return S12;
			when 11	=>	return S11;
			when 10	=>	return S10;
			when others	=>	return Bad_RCS_STATE_Value;
		end case;
	end Int_To_Enum_RCS_STATE;

	Enum_RCS_STATE_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"RCS_STATE",
			Enum_RCS_STATE_Name_List,
			Enum_RCS_STATE_Int_List,
			20,
			54,
			Enum_RCS_STATE_Symbol_Lookup'Access);

	Enum_RCS_STATUS_Name_List : constant Char_Array(1..105) := (
		'R','C','S','_','D','O','N','E',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'R','C','S','_','E','R','R','O','R',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'R','C','S','_','E','X','E','C',nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,
		'U','N','I','N','I','T','I','A','L','I','Z','E','D','_','S','T','A','T','U','S',nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_RCS_STATUS_Int_List : constant Cms.Int_Array(1..5) := (
		1, -- RCS_DONE
		3, -- RCS_ERROR
		2, -- RCS_EXEC
		-1, -- UNINITIALIZED_STATUS
		-1
		);
	enum_RCS_STATUS_RCS_DONE_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_DONE");
	enum_RCS_STATUS_RCS_ERROR_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_ERROR");
	enum_RCS_STATUS_RCS_EXEC_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_EXEC");
	enum_RCS_STATUS_UNINITIALIZED_STATUS_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("UNINITIALIZED_STATUS");
	function Enum_RCS_STATUS_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_RCS_STATUS_Symbol_Lookup,"ada_RCS_STATUS_stat_msg_v2_n_ada_symbol_lookup");

	function Enum_RCS_STATUS_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 1	=>	return enum_RCS_STATUS_RCS_DONE_Key_Name; -- RCS_DONE
			when 3	=>	return enum_RCS_STATUS_RCS_ERROR_Key_Name; -- RCS_ERROR
			when 2	=>	return enum_RCS_STATUS_RCS_EXEC_Key_Name; -- RCS_EXEC
			when -1	=>	return enum_RCS_STATUS_UNINITIALIZED_STATUS_Key_Name; -- UNINITIALIZED_STATUS
			when others	=>	return Null_Ptr;
		end case;
	end Enum_RCS_STATUS_Symbol_Lookup;

	function Enum_RCS_STATUS_To_Int(enum_val: in RCS_STATUS) return int is
	begin
		case enum_val is
			when RCS_EXEC	=>	return 2;
			when RCS_DONE	=>	return 1;
			when RCS_ERROR	=>	return 3;
			when UNINITIALIZED_STATUS	=>	return -1;
			when Bad_RCS_STATUS_Value	=>	return -1;
		end case;
	end Enum_RCS_STATUS_To_Int;

	function Int_To_Enum_RCS_STATUS(enum_int: in int) return RCS_STATUS is
	begin
		case enum_int is
			when 2	=>	return RCS_EXEC;
			when 1	=>	return RCS_DONE;
			when 3	=>	return RCS_ERROR;
			when -1	=>	return UNINITIALIZED_STATUS;
			when others	=>	return Bad_RCS_STATUS_Value;
		end case;
	end Int_To_Enum_RCS_STATUS;

	Enum_RCS_STATUS_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"RCS_STATUS",
			Enum_RCS_STATUS_Name_List,
			Enum_RCS_STATUS_Int_List,
			21,
			5,
			Enum_RCS_STATUS_Symbol_Lookup'Access);

	Enum_RCS_ADMIN_STATE_Name_List : constant Char_Array(1..100) := (
		'A','D','M','I','N','_','I','N','I','T','I','A','L','I','Z','E','D',nul,nul,nul,
		'A','D','M','I','N','_','S','H','U','T','_','D','O','W','N',nul,nul,nul,nul,nul,
		'A','D','M','I','N','_','U','N','I','N','I','T','I','A','L','I','Z','E','D',nul,
		'R','C','S','_','A','D','M','I','N','_','Z','E','R','O',nul,nul,nul,nul,nul,nul,
		nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul,nul
		);
	Enum_RCS_ADMIN_STATE_Int_List : constant Cms.Int_Array(1..5) := (
		2, -- ADMIN_INITIALIZED
		3, -- ADMIN_SHUT_DOWN
		1, -- ADMIN_UNINITIALIZED
		0, -- RCS_ADMIN_ZERO
		-1
		);
	enum_RCS_ADMIN_STATE_ADMIN_INITIALIZED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_INITIALIZED");
	enum_RCS_ADMIN_STATE_ADMIN_SHUT_DOWN_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_SHUT_DOWN");
	enum_RCS_ADMIN_STATE_ADMIN_UNINITIALIZED_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("ADMIN_UNINITIALIZED");
	enum_RCS_ADMIN_STATE_RCS_ADMIN_ZERO_Key_Name : constant Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_String("RCS_ADMIN_ZERO");
	function Enum_RCS_ADMIN_STATE_Symbol_Lookup(enum_int : in long) return Interfaces.C.Strings.chars_ptr;
	pragma Export(C,Enum_RCS_ADMIN_STATE_Symbol_Lookup,"ada_RCS_ADMIN_STATE_stat_msg_v2_n_ada_symbol_lookup");

	function Enum_RCS_ADMIN_STATE_Symbol_Lookup(enum_int: in long) return Interfaces.C.Strings.chars_ptr is
	begin
		case enum_int is
			when 2	=>	return enum_RCS_ADMIN_STATE_ADMIN_INITIALIZED_Key_Name; -- ADMIN_INITIALIZED
			when 3	=>	return enum_RCS_ADMIN_STATE_ADMIN_SHUT_DOWN_Key_Name; -- ADMIN_SHUT_DOWN
			when 1	=>	return enum_RCS_ADMIN_STATE_ADMIN_UNINITIALIZED_Key_Name; -- ADMIN_UNINITIALIZED
			when 0	=>	return enum_RCS_ADMIN_STATE_RCS_ADMIN_ZERO_Key_Name; -- RCS_ADMIN_ZERO
			when others	=>	return Null_Ptr;
		end case;
	end Enum_RCS_ADMIN_STATE_Symbol_Lookup;

	function Enum_RCS_ADMIN_STATE_To_Int(enum_val: in RCS_ADMIN_STATE) return int is
	begin
		case enum_val is
			when ADMIN_INITIALIZED	=>	return 2;
			when ADMIN_UNINITIALIZED	=>	return 1;
			when ADMIN_SHUT_DOWN	=>	return 3;
			when RCS_ADMIN_ZERO	=>	return 0;
			when Bad_RCS_ADMIN_STATE_Value	=>	return -1;
		end case;
	end Enum_RCS_ADMIN_STATE_To_Int;

	function Int_To_Enum_RCS_ADMIN_STATE(enum_int: in int) return RCS_ADMIN_STATE is
	begin
		case enum_int is
			when 2	=>	return ADMIN_INITIALIZED;
			when 1	=>	return ADMIN_UNINITIALIZED;
			when 3	=>	return ADMIN_SHUT_DOWN;
			when 0	=>	return RCS_ADMIN_ZERO;
			when others	=>	return Bad_RCS_ADMIN_STATE_Value;
		end case;
	end Int_To_Enum_RCS_ADMIN_STATE;

	Enum_RCS_ADMIN_STATE_Info : constant Cms.Cms_Enum_Info_Access := Cms.New_Cms_Enum_Info(
			"RCS_ADMIN_STATE",
			Enum_RCS_ADMIN_STATE_Name_List,
			Enum_RCS_ADMIN_STATE_Int_List,
			20,
			5,
			Enum_RCS_ADMIN_STATE_Symbol_Lookup'Access);


	-- Every NMLmsg type needs an update and an initialize function.

	procedure Update_RCS_STAT_MSG_V2(Cms_Ptr : in Cms.Cms_Access; Msg : in RCS_STAT_MSG_V2_Access) is
	begin
		Cms.Begin_Class(Cms_Ptr,"RCS_STAT_MSG_V2","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Update_Internal_RCS_STAT_MSG(Cms_Ptr, RCS_STAT_MSG(Msg.all));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Msg.admin_state := Int_To_Enum_RCS_ADMIN_STATE(
			Cms.Update_Enumeration(Cms_Ptr, "admin_state", Enum_RCS_ADMIN_STATE_To_Int(Msg.admin_state), Enum_RCS_ADMIN_STATE_Info));
		Cms.Begin_Class_Var(Cms_Ptr,"tt");
		Update_Internal_time_tracker(Cms_Ptr,Msg.tt);
		Cms.End_Class_Var(Cms_Ptr,"tt");
		Cms.Update_Dla_Length(Cms_Ptr,"message_length", Msg.message_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "message", Msg.message,Msg.message_length,80);
		Cms.End_Class(Cms_Ptr,"RCS_STAT_MSG_V2","");
	end Update_RCS_STAT_MSG_V2;

	procedure Update_Internal_RCS_STAT_MSG_V2(Cms_Ptr : in Cms.Cms_Access; Msg : in out RCS_STAT_MSG_V2) is
	begin
		Cms.Begin_Class(Cms_Ptr,"RCS_STAT_MSG_V2","");
		Cms.Begin_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Update_Internal_RCS_STAT_MSG(Cms_Ptr, RCS_STAT_MSG(Msg));
		Cms.End_Base_Class(Cms_Ptr,"RCS_STAT_MSG");
		Msg.admin_state := Int_To_Enum_RCS_ADMIN_STATE(
			Cms.Update_Enumeration(Cms_Ptr, "admin_state", Enum_RCS_ADMIN_STATE_To_Int(Msg.admin_state), Enum_RCS_ADMIN_STATE_Info));
		Cms.Begin_Class_Var(Cms_Ptr,"tt");
		Update_Internal_time_tracker(Cms_Ptr,Msg.tt);
		Cms.End_Class_Var(Cms_Ptr,"tt");
		Cms.Update_Dla_Length(Cms_Ptr,"message_length", Msg.message_Length);
		Cms.Update_Char_Dla(Cms_Ptr, "message", Msg.message,Msg.message_length,80);
		Cms.End_Class(Cms_Ptr,"RCS_STAT_MSG_V2","");
	end Update_Internal_RCS_STAT_MSG_V2;




	function Format(Nml_Type : in long;
			Msg : in NmlMsg_Access;
			Cms_Ptr : in Cms.Cms_Access)
				return int is
	begin
		return 1;
	end Format;

end stat_msg_v2_n_ada;

-- End of Ada Body file  stat_msg_v2_n_ada.adb

