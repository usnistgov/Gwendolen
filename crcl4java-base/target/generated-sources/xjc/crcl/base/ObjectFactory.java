//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.09.21 at 09:41:19 AM EDT 
//


package crcl.base;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the crcl.base package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _CRCLStatus_QNAME = new QName("", "CRCLStatus");
    private final static QName _CRCLProgram_QNAME = new QName("", "CRCLProgram");
    private final static QName _CRCLCommandInstance_QNAME = new QName("", "CRCLCommandInstance");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: crcl.base
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link CRCLStatusType }
     * 
     */
    public CRCLStatusType createCRCLStatusType() {
        return new CRCLStatusType();
    }

    /**
     * Create an instance of {@link CRCLProgramType }
     * 
     */
    public CRCLProgramType createCRCLProgramType() {
        return new CRCLProgramType();
    }

    /**
     * Create an instance of {@link CRCLCommandInstanceType }
     * 
     */
    public CRCLCommandInstanceType createCRCLCommandInstanceType() {
        return new CRCLCommandInstanceType();
    }

    /**
     * Create an instance of {@link JointPositionToleranceSettingType }
     * 
     */
    public JointPositionToleranceSettingType createJointPositionToleranceSettingType() {
        return new JointPositionToleranceSettingType();
    }

    /**
     * Create an instance of {@link JointPositionsTolerancesType }
     * 
     */
    public JointPositionsTolerancesType createJointPositionsTolerancesType() {
        return new JointPositionsTolerancesType();
    }

    /**
     * Create an instance of {@link PointType }
     * 
     */
    public PointType createPointType() {
        return new PointType();
    }

    /**
     * Create an instance of {@link PoseType }
     * 
     */
    public PoseType createPoseType() {
        return new PoseType();
    }

    /**
     * Create an instance of {@link PoseAndSetType }
     * 
     */
    public PoseAndSetType createPoseAndSetType() {
        return new PoseAndSetType();
    }

    /**
     * Create an instance of {@link TwistType }
     * 
     */
    public TwistType createTwistType() {
        return new TwistType();
    }

    /**
     * Create an instance of {@link VectorType }
     * 
     */
    public VectorType createVectorType() {
        return new VectorType();
    }

    /**
     * Create an instance of {@link WrenchType }
     * 
     */
    public WrenchType createWrenchType() {
        return new WrenchType();
    }

    /**
     * Create an instance of {@link PoseToleranceType }
     * 
     */
    public PoseToleranceType createPoseToleranceType() {
        return new PoseToleranceType();
    }

    /**
     * Create an instance of {@link ParameterSettingType }
     * 
     */
    public ParameterSettingType createParameterSettingType() {
        return new ParameterSettingType();
    }

    /**
     * Create an instance of {@link RotAccelAbsoluteType }
     * 
     */
    public RotAccelAbsoluteType createRotAccelAbsoluteType() {
        return new RotAccelAbsoluteType();
    }

    /**
     * Create an instance of {@link RotAccelRelativeType }
     * 
     */
    public RotAccelRelativeType createRotAccelRelativeType() {
        return new RotAccelRelativeType();
    }

    /**
     * Create an instance of {@link RotSpeedAbsoluteType }
     * 
     */
    public RotSpeedAbsoluteType createRotSpeedAbsoluteType() {
        return new RotSpeedAbsoluteType();
    }

    /**
     * Create an instance of {@link RotSpeedRelativeType }
     * 
     */
    public RotSpeedRelativeType createRotSpeedRelativeType() {
        return new RotSpeedRelativeType();
    }

    /**
     * Create an instance of {@link TransAccelAbsoluteType }
     * 
     */
    public TransAccelAbsoluteType createTransAccelAbsoluteType() {
        return new TransAccelAbsoluteType();
    }

    /**
     * Create an instance of {@link TransAccelRelativeType }
     * 
     */
    public TransAccelRelativeType createTransAccelRelativeType() {
        return new TransAccelRelativeType();
    }

    /**
     * Create an instance of {@link TransSpeedAbsoluteType }
     * 
     */
    public TransSpeedAbsoluteType createTransSpeedAbsoluteType() {
        return new TransSpeedAbsoluteType();
    }

    /**
     * Create an instance of {@link TransSpeedRelativeType }
     * 
     */
    public TransSpeedRelativeType createTransSpeedRelativeType() {
        return new TransSpeedRelativeType();
    }

    /**
     * Create an instance of {@link GuardType }
     * 
     */
    public GuardType createGuardType() {
        return new GuardType();
    }

    /**
     * Create an instance of {@link ActuateJointsType }
     * 
     */
    public ActuateJointsType createActuateJointsType() {
        return new ActuateJointsType();
    }

    /**
     * Create an instance of {@link ActuateJointType }
     * 
     */
    public ActuateJointType createActuateJointType() {
        return new ActuateJointType();
    }

    /**
     * Create an instance of {@link CloseToolChangerType }
     * 
     */
    public CloseToolChangerType createCloseToolChangerType() {
        return new CloseToolChangerType();
    }

    /**
     * Create an instance of {@link ConfigureJointReportsType }
     * 
     */
    public ConfigureJointReportsType createConfigureJointReportsType() {
        return new ConfigureJointReportsType();
    }

    /**
     * Create an instance of {@link ConfigureJointReportType }
     * 
     */
    public ConfigureJointReportType createConfigureJointReportType() {
        return new ConfigureJointReportType();
    }

    /**
     * Create an instance of {@link DwellType }
     * 
     */
    public DwellType createDwellType() {
        return new DwellType();
    }

    /**
     * Create an instance of {@link EndCanonType }
     * 
     */
    public EndCanonType createEndCanonType() {
        return new EndCanonType();
    }

    /**
     * Create an instance of {@link GetStatusType }
     * 
     */
    public GetStatusType createGetStatusType() {
        return new GetStatusType();
    }

    /**
     * Create an instance of {@link InitCanonType }
     * 
     */
    public InitCanonType createInitCanonType() {
        return new InitCanonType();
    }

    /**
     * Create an instance of {@link JointForceTorqueType }
     * 
     */
    public JointForceTorqueType createJointForceTorqueType() {
        return new JointForceTorqueType();
    }

    /**
     * Create an instance of {@link JointSpeedAccelType }
     * 
     */
    public JointSpeedAccelType createJointSpeedAccelType() {
        return new JointSpeedAccelType();
    }

    /**
     * Create an instance of {@link MessageType }
     * 
     */
    public MessageType createMessageType() {
        return new MessageType();
    }

    /**
     * Create an instance of {@link MoveScrewType }
     * 
     */
    public MoveScrewType createMoveScrewType() {
        return new MoveScrewType();
    }

    /**
     * Create an instance of {@link MoveThroughToType }
     * 
     */
    public MoveThroughToType createMoveThroughToType() {
        return new MoveThroughToType();
    }

    /**
     * Create an instance of {@link MoveToType }
     * 
     */
    public MoveToType createMoveToType() {
        return new MoveToType();
    }

    /**
     * Create an instance of {@link OpenToolChangerType }
     * 
     */
    public OpenToolChangerType createOpenToolChangerType() {
        return new OpenToolChangerType();
    }

    /**
     * Create an instance of {@link RunProgramType }
     * 
     */
    public RunProgramType createRunProgramType() {
        return new RunProgramType();
    }

    /**
     * Create an instance of {@link SetAngleUnitsType }
     * 
     */
    public SetAngleUnitsType createSetAngleUnitsType() {
        return new SetAngleUnitsType();
    }

    /**
     * Create an instance of {@link SetEndEffectorParametersType }
     * 
     */
    public SetEndEffectorParametersType createSetEndEffectorParametersType() {
        return new SetEndEffectorParametersType();
    }

    /**
     * Create an instance of {@link SetEndEffectorType }
     * 
     */
    public SetEndEffectorType createSetEndEffectorType() {
        return new SetEndEffectorType();
    }

    /**
     * Create an instance of {@link SetEndPoseToleranceType }
     * 
     */
    public SetEndPoseToleranceType createSetEndPoseToleranceType() {
        return new SetEndPoseToleranceType();
    }

    /**
     * Create an instance of {@link SetDefaultJointPositonsTolerancesType }
     * 
     */
    public SetDefaultJointPositonsTolerancesType createSetDefaultJointPositonsTolerancesType() {
        return new SetDefaultJointPositonsTolerancesType();
    }

    /**
     * Create an instance of {@link SetForceUnitsType }
     * 
     */
    public SetForceUnitsType createSetForceUnitsType() {
        return new SetForceUnitsType();
    }

    /**
     * Create an instance of {@link SetIntermediatePoseToleranceType }
     * 
     */
    public SetIntermediatePoseToleranceType createSetIntermediatePoseToleranceType() {
        return new SetIntermediatePoseToleranceType();
    }

    /**
     * Create an instance of {@link SetLengthUnitsType }
     * 
     */
    public SetLengthUnitsType createSetLengthUnitsType() {
        return new SetLengthUnitsType();
    }

    /**
     * Create an instance of {@link SetMotionCoordinationType }
     * 
     */
    public SetMotionCoordinationType createSetMotionCoordinationType() {
        return new SetMotionCoordinationType();
    }

    /**
     * Create an instance of {@link SetRobotParametersType }
     * 
     */
    public SetRobotParametersType createSetRobotParametersType() {
        return new SetRobotParametersType();
    }

    /**
     * Create an instance of {@link SetRotAccelType }
     * 
     */
    public SetRotAccelType createSetRotAccelType() {
        return new SetRotAccelType();
    }

    /**
     * Create an instance of {@link SetRotSpeedType }
     * 
     */
    public SetRotSpeedType createSetRotSpeedType() {
        return new SetRotSpeedType();
    }

    /**
     * Create an instance of {@link SetTorqueUnitsType }
     * 
     */
    public SetTorqueUnitsType createSetTorqueUnitsType() {
        return new SetTorqueUnitsType();
    }

    /**
     * Create an instance of {@link SetTransAccelType }
     * 
     */
    public SetTransAccelType createSetTransAccelType() {
        return new SetTransAccelType();
    }

    /**
     * Create an instance of {@link SetTransSpeedType }
     * 
     */
    public SetTransSpeedType createSetTransSpeedType() {
        return new SetTransSpeedType();
    }

    /**
     * Create an instance of {@link StopMotionType }
     * 
     */
    public StopMotionType createStopMotionType() {
        return new StopMotionType();
    }

    /**
     * Create an instance of {@link ConfigureStatusReportType }
     * 
     */
    public ConfigureStatusReportType createConfigureStatusReportType() {
        return new ConfigureStatusReportType();
    }

    /**
     * Create an instance of {@link EnableSensorType }
     * 
     */
    public EnableSensorType createEnableSensorType() {
        return new EnableSensorType();
    }

    /**
     * Create an instance of {@link DisableSensorType }
     * 
     */
    public DisableSensorType createDisableSensorType() {
        return new DisableSensorType();
    }

    /**
     * Create an instance of {@link EnableGripperType }
     * 
     */
    public EnableGripperType createEnableGripperType() {
        return new EnableGripperType();
    }

    /**
     * Create an instance of {@link DisableGripperType }
     * 
     */
    public DisableGripperType createDisableGripperType() {
        return new DisableGripperType();
    }

    /**
     * Create an instance of {@link EnableRobotParameterStatusType }
     * 
     */
    public EnableRobotParameterStatusType createEnableRobotParameterStatusType() {
        return new EnableRobotParameterStatusType();
    }

    /**
     * Create an instance of {@link DisableRobotParameterStatusType }
     * 
     */
    public DisableRobotParameterStatusType createDisableRobotParameterStatusType() {
        return new DisableRobotParameterStatusType();
    }

    /**
     * Create an instance of {@link CommandStatusType }
     * 
     */
    public CommandStatusType createCommandStatusType() {
        return new CommandStatusType();
    }

    /**
     * Create an instance of {@link JointStatusesType }
     * 
     */
    public JointStatusesType createJointStatusesType() {
        return new JointStatusesType();
    }

    /**
     * Create an instance of {@link JointStatusType }
     * 
     */
    public JointStatusType createJointStatusType() {
        return new JointStatusType();
    }

    /**
     * Create an instance of {@link JointLimitType }
     * 
     */
    public JointLimitType createJointLimitType() {
        return new JointLimitType();
    }

    /**
     * Create an instance of {@link ParallelGripperStatusType }
     * 
     */
    public ParallelGripperStatusType createParallelGripperStatusType() {
        return new ParallelGripperStatusType();
    }

    /**
     * Create an instance of {@link PoseStatusType }
     * 
     */
    public PoseStatusType createPoseStatusType() {
        return new PoseStatusType();
    }

    /**
     * Create an instance of {@link SettingsStatusType }
     * 
     */
    public SettingsStatusType createSettingsStatusType() {
        return new SettingsStatusType();
    }

    /**
     * Create an instance of {@link ThreeFingerGripperStatusType }
     * 
     */
    public ThreeFingerGripperStatusType createThreeFingerGripperStatusType() {
        return new ThreeFingerGripperStatusType();
    }

    /**
     * Create an instance of {@link VacuumGripperStatusType }
     * 
     */
    public VacuumGripperStatusType createVacuumGripperStatusType() {
        return new VacuumGripperStatusType();
    }

    /**
     * Create an instance of {@link SensorStatusesType }
     * 
     */
    public SensorStatusesType createSensorStatusesType() {
        return new SensorStatusesType();
    }

    /**
     * Create an instance of {@link GuardsStatusesType }
     * 
     */
    public GuardsStatusesType createGuardsStatusesType() {
        return new GuardsStatusesType();
    }

    /**
     * Create an instance of {@link SensorStatusType }
     * 
     */
    public SensorStatusType createSensorStatusType() {
        return new SensorStatusType();
    }

    /**
     * Create an instance of {@link OnOffSensorStatusType }
     * 
     */
    public OnOffSensorStatusType createOnOffSensorStatusType() {
        return new OnOffSensorStatusType();
    }

    /**
     * Create an instance of {@link ForceTorqueSensorStatusType }
     * 
     */
    public ForceTorqueSensorStatusType createForceTorqueSensorStatusType() {
        return new ForceTorqueSensorStatusType();
    }

    /**
     * Create an instance of {@link ScalarSensorStatusType }
     * 
     */
    public ScalarSensorStatusType createScalarSensorStatusType() {
        return new ScalarSensorStatusType();
    }

    /**
     * Create an instance of {@link CountSensorStatusType }
     * 
     */
    public CountSensorStatusType createCountSensorStatusType() {
        return new CountSensorStatusType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CRCLStatusType }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link CRCLStatusType }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "CRCLStatus")
    public JAXBElement<CRCLStatusType> createCRCLStatus(CRCLStatusType value) {
        return new JAXBElement<CRCLStatusType>(_CRCLStatus_QNAME, CRCLStatusType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CRCLProgramType }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link CRCLProgramType }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "CRCLProgram")
    public JAXBElement<CRCLProgramType> createCRCLProgram(CRCLProgramType value) {
        return new JAXBElement<CRCLProgramType>(_CRCLProgram_QNAME, CRCLProgramType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CRCLCommandInstanceType }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link CRCLCommandInstanceType }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "CRCLCommandInstance")
    public JAXBElement<CRCLCommandInstanceType> createCRCLCommandInstance(CRCLCommandInstanceType value) {
        return new JAXBElement<CRCLCommandInstanceType>(_CRCLCommandInstance_QNAME, CRCLCommandInstanceType.class, null, value);
    }

}
